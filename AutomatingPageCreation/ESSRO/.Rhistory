hr(),
# sectiontitle ---------------------------------
numericInput("ESSRO_initparam_popgrowth", "Population Growth", 0.05, step = 0.05),
checkboxInput("ESSRO_changeinparam_popgrowth", "Change in Population Growth?"),
conditionalPanel(
condition = "input.ESSRO_changeinparam_popgrowth == true",
numericInput("ESSRO_pc_popgrowth_period", "Period of Change in Population Growth", 10, min = 0, max = 50),
numericInput("ESSRO_pc_popgrowth_newval", "New Value of Population Growth", 0.4, step = 0.05)),
hr(),
# sectiontitle ---------------------------------
numericInput("ESSRO_initparam_tfpgrowth", "TFP Growth", 0.02, step = 0.01),
checkboxInput("ESSRO_changeinparam_tfpgrowth", "Change in TFP Growth?"),
conditionalPanel(
condition = "input.ESSRO_changeinparam_tfpgrowth == true",
numericInput("ESSRO_pc_tfpgrowth_period", "Period of Change in TFP Growth", 10, min = 0, max = 50),
numericInput("ESSRO_pc_tfpgrowth_newval", "New Value of TFP Growth", 0.4, step = 0.01)),
hr(),
# sectiontitle ---------------------------------
numericInput("ESSRO_initparam_energyconsumption", "Energy Consupmtion", 0.05, step = 0.01),
checkboxInput("ESSRO_changeinparam_energyconsumption", "Change in Energy Consupmtion?"),
conditionalPanel(
condition = "input.ESSRO_changeinparam_energyconsumption == true",
numericInput("ESSRO_pc_energyconsumption_period", "Period of Change in Energy Consupmtion", 10, min = 0, max = 50),
numericInput("ESSRO_pc_energyconsumption_newval", "New Value of Energy Consupmtion", 0.4, step = 0.05)),
hr(),
# sectiontitle ---------------------------------
numericInput("ESSRO_initparam_savings", "Savings Rate", 0.2, step = 0.05),
checkboxInput("ESSRO_changeinparam_savings", "Change in Savings Rate?"),
conditionalPanel(
condition = "input.ESSRO_changeinparam_savings == true",
numericInput("ESSRO_pc_savings_period", "Period of Change in Savings Rate", 10, min = 0, max = 50),
numericInput("ESSRO_pc_savings_newval", "New Value of Savings Rate", 0.4, step = 0.05)),
hr(),
# sectiontitle ---------------------------------
numericInput("ESSRO_initparam_delta", "Delta", 0.15, step = 0.05),
checkboxInput("ESSRO_changeinparam_delta", "Change in Delta?"),
conditionalPanel(
condition = "input.ESSRO_changeinparam_delta == true",
numericInput("ESSRO_pc_delta_period", "Period of Change in Delta", 10, min = 0, max = 50),
numericInput("ESSRO_pc_delta_newval", "New Value of Delta", 0.4, step = 0.05)),
hr(),
# Periods ---------------------------------
numericInput("ESSRO_nperiods_selected", "Periods", 200, step = 20),
hr())
)),
# Main Panel  ---------------------------------
mainPanel(
# Model Equations  ---------------------------------
titlePanel("Model Equations"),
withMathJax(),
# insert math here
p('insertmathhere'),
# Visualisation  ---------------------------------
# textOutput("test"),
titlePanel("Simulation"),
plotOutput("ESSRO_Viz", height = "1000px"),
# Model Simulation Data ---------------------------------
titlePanel("Simulation Data"),
dataTableOutput("ESSRO_Data"),
# Correctness Checker ---------------------------------
titlePanel("How does the simulation compare to the theoretic steady state values?"),
dataTableOutput("ESSRO_Correctness_Table"),
dataTableOutput("debugging")
)
)),
tabPanel("Extended Solow Model (Scarce Resources — Land)", fluid = TRUE),
tabPanel("Extended Solow Model (Scarce Resources — Oil and Land)", fluid = TRUE),
# Extended Solow Model (Productive Externalities) ---------------------------------
tabPanel("Extended Solow Model (Productive Externalities)", fluid = TRUE)
)
),
### Server #############################
server = function(input, output, session) {
# Basic Solow Growth Model =================================
# Parameter Grid ---------------------------------
BS_parametergrid <- reactive({
# Names of Parameters ---------------------------------
BS_parameternames <- c("B", "alpha", "delta", "n", "s")
# Periods of Changes ---------------------------------
BS_parameterchange_period <- c(if(input$BS_changeinparam_tfp) input$BS_pc_tfp_period else NA,
if(input$BS_changeinparam_alpha) input$BS_pc_alpha_period else NA,
if(input$BS_changeinparam_delta) input$BS_pc_delta_period else NA,
if(input$BS_changeinparam_popgrowth) input$BS_pc_popgrowth_period else NA,
if(input$BS_changeinparam_savings) input$BS_pc_savings_period else NA)
# Starting Values of Parameters ---------------------------------
BS_parameterchange_valuebefore <- c(input$BS_initval_B,
input$BS_initparam_alpha,
input$BS_initparam_delta,
input$BS_initparam_popgrowth,
input$BS_initparam_savings
)
# Values of Parameters after Change ---------------------------------
BS_parameterchange_valueafter <- c(if(input$BS_changeinparam_tfp) input$BS_pc_tfp_newval else NA,
if(input$BS_changeinparam_alpha) input$BS_pc_alpha_newval else NA,
if(input$BS_changeinparam_delta) input$BS_pc_delta_newval else NA,
if(input$BS_changeinparam_popgrowth) input$BS_pc_popgrowth_newval else NA,
if(input$BS_changeinparam_savings) input$BS_pc_savings_newval else NA)
# Creating the Grid ---------------------------------
create_parameter_grid(
BS_parameternames,
BS_parameterchange_valuebefore,
BS_parameterchange_period,
BS_parameterchange_valueafter,
input$BS_nperiods_selected
)
})
BS_vtv_select_encoded <- reactive({
variable_encoder(input$BS_vtv)
})
BS_vtv_processed_sim <- reactive({
aux <- BS_vtv_processed_encoded()
aux_non_standard_detect <- aux %in% c("L", "K", "Y")
aux[!aux_non_standard_detect]
})
# output$test <- renderText({output$plot_height})
BS_aux_data <- reactive({
SimulateBasicSolowModel(BS_parametergrid(), input$BS_nperiods_selected,
list(K = input$BS_initval_K, L = input$BS_initval_K))
})
output$BS_Data <- renderDataTable({BS_aux_data() %>% mutate_all(round, digits = 3)})
output$BS_Viz <- renderPlot({
VisualiseSimulation(BS_aux_data(), BS_vtv_select_encoded(), input$BS_scales_free_or_fixed)
})
BS_aux_correcttable <- reactive({
simulation_correctness_checker(BS_aux_data()[nrow(BS_aux_data()), ],
BS_parametergrid()[nrow(BS_parametergrid()), ],
"BS")
})
output$BS_Correctness_Table <- renderDataTable({
BS_aux_correcttable()
})
# General Solow Growth Model =================================
# Parameter Grid ---------------------------------
GS_parametergrid <- reactive({
# Names of Parameters ---------------------------------
GS_parameternames <- c("g", "alpha", "delta", "n", "s")
# Periods of Changes ---------------------------------
GS_parameterchange_period <- c(if(input$GS_changeinparam_g) input$GS_pc_g_period else NA,
if(input$GS_changeinparam_alpha) input$GS_pc_alpha_period else NA,
if(input$GS_changeinparam_delta) input$GS_pc_delta_period else NA,
if(input$GS_changeinparam_popgrowth) input$GS_pc_popgrowth_period else NA,
if(input$GS_changeinparam_savings) input$GS_pc_savings_period else NA)
# Starting Values of Parameters ---------------------------------
GS_parameterchange_valuebefore <- c(input$GS_initparam_g,
input$GS_initparam_alpha,
input$GS_initparam_delta,
input$GS_initparam_popgrowth,
input$GS_initparam_savings
)
# Values of Parameters after Change ---------------------------------
GS_parameterchange_valueafter <- c(if(input$GS_changeinparam_g) input$GS_pc_g_newval else NA,
if(input$GS_changeinparam_alpha) input$GS_pc_alpha_newval else NA,
if(input$GS_changeinparam_delta) input$GS_pc_delta_newval else NA,
if(input$GS_changeinparam_popgrowth) input$GS_pc_popgrowth_newval else NA,
if(input$GS_changeinparam_savings) input$GS_pc_savings_newval else NA)
# Creating the Grid ---------------------------------
create_parameter_grid(
GS_parameternames,
GS_parameterchange_valuebefore,
GS_parameterchange_period,
GS_parameterchange_valueafter,
input$GS_nperiods_selected
)
})
GS_vtv_select_encoded <- reactive({
variable_encoder(input$GS_vtv)
})
GS_vtv_processed_sim <- reactive({
aux <- GS_vtv_processed_encoded()
aux_non_standard_detect <- aux %in% c("L", "K", "Y", "TFP")
aux[!aux_non_standard_detect]
})
# output$test <- renderText({output$plot_height})
GS_aux_data <- reactive({
SimulateGeneralSolowModel(GS_parametergrid(), input$GS_nperiods_selected,
list(K = input$GS_initval_K, L = input$GS_initval_K, A = input$GS_initval_A))
})
output$GS_Data <- renderDataTable({GS_aux_data() %>% mutate_all(round, digits = 3)})
output$GS_Viz <- renderPlot({
VisualiseSimulation(GS_aux_data(), GS_vtv_select_encoded(), input$GS_scales_free_or_fixed)
})
GS_aux_correcttable <- reactive({
simulation_correctness_checker(GS_aux_data()[nrow(GS_aux_data()), ],
GS_parametergrid()[nrow(GS_parametergrid()), ],
"GS")
})
output$GS_Correctness_Table <- renderDataTable({
GS_aux_correcttable()
})
# Extended Solow Growth Model — Small Open Economy =================================
# Parameter Grid ---------------------------------
ESSOE_parametergrid <- reactive({
# Names of Parameters ---------------------------------
ESSOE_parameternames <- c("B", "alpha", "r", "n", "s")
# Periods of Changes ---------------------------------
ESSOE_parameterchange_period <- c(if(input$ESSOE_changeinparam_tfp) input$ESSOE_pc_tfp_period else NA,
if(input$ESSOE_changeinparam_alpha) input$ESSOE_pc_alpha_period else NA,
if(input$ESSOE_changeinparam_realint) input$ESSOE_pc_realint_period else NA,
if(input$ESSOE_changeinparam_popgrowth) input$ESSOE_pc_popgrowth_period else NA,
if(input$ESSOE_changeinparam_savings) input$ESSOE_pc_savings_period else NA)
# Starting Values of Parameters ---------------------------------
ESSOE_parameterchange_valuebefore <- c(input$ESSOE_initval_B,
input$ESSOE_initparam_alpha,
input$ESSOE_initparam_realint,
input$ESSOE_initparam_popgrowth,
input$ESSOE_initparam_savings
)
# Values of Parameters after Change ---------------------------------
ESSOE_parameterchange_valueafter <- c(if(input$ESSOE_changeinparam_tfp) input$ESSOE_pc_tfp_newval else NA,
if(input$ESSOE_changeinparam_alpha) input$ESSOE_pc_alpha_newval else NA,
if(input$ESSOE_changeinparam_realint) input$ESSOE_pc_realint_newval else NA,
if(input$ESSOE_changeinparam_popgrowth) input$ESSOE_pc_popgrowth_newval else NA,
if(input$ESSOE_changeinparam_savings) input$ESSOE_pc_savings_newval else NA)
# Creating the Grid ---------------------------------
create_parameter_grid(
ESSOE_parameternames,
ESSOE_parameterchange_valuebefore,
ESSOE_parameterchange_period,
ESSOE_parameterchange_valueafter,
input$ESSOE_nperiods_selected
)
})
# Encoding the selected Variables (for use in visualise function) ---------------------------------
ESSOE_vtv_select_encoded <- reactive({
variable_encoder(input$ESSOE_vtv)
})
# unnecessary ---------------------------------
ESSOE_vtv_processed_sim <- reactive({
aux <- ESSOE_vtv_processed_encoded()
aux_non_standard_detect <- aux %in% c("L", "K", "Y")
aux[!aux_non_standard_detect]
})
# output$test <- renderText({output$plot_height})
# Simulating the Economy ---------------------------------
ESSOE_aux_data <- reactive({
SimulateExtendedSolowModelSmallOpenEconomy(ESSOE_parametergrid(), input$ESSOE_nperiods_selected,
list(L = input$ESSOE_initval_L, V = input$ESSOE_initval_V))
})
# Rendering the Simulation as a table ---------------------------------
output$ESSOE_Data <- renderDataTable({ESSOE_aux_data() %>% mutate_all(round, digits = 3)})
# Visualising the Simulation (the selected variables respectively) ---------------------------------
output$ESSOE_Viz <- renderPlot({
VisualiseSimulation(ESSOE_aux_data(), ESSOE_vtv_select_encoded(), input$ESSOE_scales_free_or_fixed)
})
ESSOE_aux_correcttable <- reactive({
simulation_correctness_checker(ESSOE_aux_data()[nrow(ESSOE_aux_data()), ],
ESSOE_parametergrid()[nrow(ESSOE_parametergrid()), ],
"ESSOE")
})
output$ESSOE_Correctness_Table <- renderDataTable({
ESSOE_aux_correcttable()
})
# to be taken out when app is published
session$onSessionEnded(stopApp)
# Extended Solow Growth Model — Human Capital =================================
# Parameter Grid ---------------------------------
ESHC_parametergrid <- reactive({
# Names of Parameters ---------------------------------
ESHC_parameternames <- c("alpha", "phi", "n", "g", "sK", "sH", "delta")
# Periods of Changes ---------------------------------
ESHC_parameterchange_period <- c(if(input$ESHC_changeinparam_alpha) input$ESHC_pc_alpha_period else NA,
if(input$ESHC_changeinparam_phi) input$ESHC_pc_phi_period else NA,
if(input$ESHC_changeinparam_popgrowth) input$ESHC_pc_popgrowth_period else NA,
if(input$ESHC_changeinparam_tfpgrowth) input$ESHC_pc_tfpgrowth_period else NA,
if(input$ESHC_changeinparam_sK) input$ESHC_pc_sK_period else NA,
if(input$ESHC_changeinparam_sH) input$ESHC_pc_sH_period else NA,
if(input$ESHC_changeinparam_delta) input$ESHC_pc_delta_period else NA)
# Starting Values of Parameters ---------------------------------
ESHC_parameterchange_valuebefore <- c(input$ESHC_initparam_alpha,
input$ESHC_initparam_phi,
input$ESHC_initparam_popgrowth,
input$ESHC_initparam_tfpgrowth,
input$ESHC_initparam_sK,
input$ESHC_initparam_sH,
input$ESHC_initparam_delta)
# Values of Parameters after Change ---------------------------------
ESHC_parameterchange_valueafter <-c(if(input$ESHC_changeinparam_alpha) input$ESHC_pc_alpha_newval else NA,
if(input$ESHC_changeinparam_phi) input$ESHC_pc_phi_newval else NA,
if(input$ESHC_changeinparam_popgrowth) input$ESHC_pc_popgrowth_newval else NA,
if(input$ESHC_changeinparam_tfpgrowth) input$ESHC_pc_tfpgrowth_newval else NA,
if(input$ESHC_changeinparam_sK) input$ESHC_pc_sK_newval else NA,
if(input$ESHC_changeinparam_sH) input$ESHC_pc_sH_newval else NA,
if(input$ESHC_changeinparam_delta) input$ESHC_pc_delta_newval else NA)
# Creating the Grid ---------------------------------
create_parameter_grid(
ESHC_parameternames,
ESHC_parameterchange_valuebefore,
ESHC_parameterchange_period,
ESHC_parameterchange_valueafter,
input$ESHC_nperiods_selected
)
})
# Outputs ---------------------------------
ESHC_vtv_select_encoded <- reactive({
variable_encoder(input$ESHC_vtv)
})
ESHC_aux_data <- reactive({
SimulateExtendedSolowModelHumanCapital(ESHC_parametergrid(), input$ESHC_nperiods_selected,
list(K = input$ESHC_initval_K, L = input$ESHC_initval_K, A = input$ESHC_initval_A, H = input$ESHC_initval_H))
})
output$ESHC_Data <- renderDataTable({ESHC_aux_data() %>% mutate_all(round, digits = 3)})
output$ESHC_Viz <- renderPlot({
VisualiseSimulation(ESHC_aux_data(), ESHC_vtv_select_encoded(), input$ESHC_scales_free_or_fixed)
})
ESHC_aux_correcttable <- reactive({
simulation_correctness_checker(ESHC_aux_data()[nrow(ESHC_aux_data()), ],
ESHC_parametergrid()[nrow(ESHC_parametergrid()), ],
"ESHC")
})
output$ESHC_Correctness_Table <- renderDataTable({
ESHC_aux_correcttable()
})
# Extended Solow Growth Model — Scarce Resources — Oil =================================
ESSRO_parametergrid <- reactive({
# Names of Parameters ---------------------------------
ESSRO_parameternames <- c("alpha", "beta", "n", "g", "sE", "s", "delta")
# Periods of Changes ---------------------------------
ESSRO_parameterchange_period <- c(
# auxspot1 (first spot to fill in the code for dynamically created code)
if(input$ESSRO_changeinparam_alpha) input$ESSRO_pc_alpha_period else NA,
if(input$ESSRO_changeinparam_beta) input$ESSRO_pc_beta_period else NA,
if(input$ESSRO_changeinparam_popgrowth) input$ESSRO_pc_popgrowth_period else NA,
if(input$ESSRO_changeinparam_tfpgrowth) input$ESSRO_pc_tfpgrowth_period else NA,
if(input$ESSRO_changeinparam_energyconsumption) input$ESSRO_pc_energyconsumption_period else NA,
if(input$ESSRO_changeinparam_savings) input$ESSRO_pc_savings_period else NA,
if(input$ESSRO_changeinparam_delta) input$ESSRO_pc_delta_period else NA
)
# Starting Values of Parameters ---------------------------------
ESSRO_parameterchange_valuebefore <- c(
# auxspot2
input$ESSRO_initparam_alpha,
input$ESSRO_initparam_beta,
input$ESSRO_initparam_popgrowth,
input$ESSRO_initparam_tfpgrowth,
input$ESSRO_initparam_energyconsumption,
input$ESSRO_initparam_savings,
input$ESSRO_initparam_delta
)
# Values of Parameters after Change ---------------------------------
ESSRO_parameterchange_valueafter <- c(
# auxspot3
if(input$ESSRO_changeinparam_alpha) input$ESSRO_pc_alpha_newval else NA,
if(input$ESSRO_changeinparam_beta) input$ESSRO_pc_beta_newval else NA,
if(input$ESSRO_changeinparam_popgrowth) input$ESSRO_pc_popgrowth_newval else NA,
if(input$ESSRO_changeinparam_tfpgrowth) input$ESSRO_pc_tfpgrowth_newval else NA,
if(input$ESSRO_changeinparam_energyconsumption) input$ESSRO_pc_energyconsumption_newval else NA,
if(input$ESSRO_changeinparam_savings) input$ESSRO_pc_savings_newval else NA,
if(input$ESSRO_changeinparam_delta) input$ESSRO_pc_delta_newval else NA
)
# Creating the Grid ---------------------------------
create_parameter_grid(
ESSRO_parameternames,
ESSRO_parameterchange_valuebefore,
ESSRO_parameterchange_period,
ESSRO_parameterchange_valueafter,
input$ESSRO_nperiods_selected
)
})
output$debugging <- renderDataTable({ESSRO_parametergrid()})
ESSRO_vtv_select_encoded <- reactive({
variable_encoder(input$ESSRO_vtv)
})
ESSRO_aux_data <- reactive({
SimulateExtendedSolowModelScarceResourceOil(ESSRO_parametergrid(), input$ESSRO_nperiods_selected,
list(R = input$ESSRO_initval_R,
L = input$ESSRO_initval_L,
K = input$ESSRO_initval_K,
A = input$ESSRO_initval_A))
})
output$ESSRO_Data <- renderDataTable({ESSRO_aux_data() %>% mutate_all(round, digits = 3)})
output$ESSRO_Viz <- renderPlot({
VisualiseSimulation(ESSRO_aux_data(), ESSRO_vtv_select_encoded(), input$ESSRO_scales_free_or_fixed)
})
ESSRO_aux_correcttable <- reactive({
simulation_correctness_checker(ESSRO_aux_data()[nrow(ESSRO_aux_data()), ],
ESSRO_parametergrid()[nrow(ESSRO_parametergrid()), ],
"ESSRO")
})
output$ESSRO_Correctness_Table <- renderDataTable({
ESSRO_aux_correcttable()
})
}
)
# A ---------------------------------
partAhelper_1 <- function(parameter){
out <- case_when(
parameter == "alpha"~ "alpha",
parameter == "beta"~ "beta",
parameter == "kappa"~ "kappa",
parameter == "phi"~ "phi",
parameter == "alpha"~ "alpha",
parameter == "s"~ "savings",
parameter == "sK"~ "sK",
parameter == "sH"~ "sH",
parameter == "n"~ "popgrowth",
parameter == "r"~ "realint",
parameter == "g"~ "tfpgrowth",
parameter == "sE"~ "energyconsumption",
parameter == "X"~ "land",
parameter == "delta"~ "delta",
TRUE ~ "NA")
if(out == "NA"){
warning(paste("Parameter translation for", parameter, "not yet created. Create it in partAhelper_1 to continue."))
}
return(out)
}
partAhelper_2 <- function(parameter){
out <- case_when(
parameter == "alpha"~ "Alpha",
parameter == "beta"~ "Beta",
parameter == "kappa"~ "Kappa",
parameter == "phi"~ "Phi",
parameter == "s"~ "Savings Rate",
parameter == "sK"~ "Savings Rate to Physical Capital",
parameter == "sH"~ "Savings Rate to Human Capital",
parameter == "n"~ "Population Growth",
parameter == "r"~ "Real Interest Rate",
parameter == "g"~ "TFP Growth",
parameter == "sE"~ "Energy Consupmtion",
parameter == "X"~ "Land",
parameter == "delta"~ "Delta",
TRUE ~ "NA")
if(out == "NA"){
warning(paste("Parameter translation for", parameter, "not yet created. Create it in partAhelper_2 to continue."))
}
return(out)
}
createpartA <- function(parameternames, new_abbreviation, startvars){
# this function creates the sidebar
code_template <- readLines("PartASnippet.R")
for(aux_parameter in rev(parameternames)){
aux_parameter_code <- code_template
aux_parameter_code <- gsub(pattern = "ESHC", replace = new_abbreviation, x = aux_parameter_code)
aux_parameter_code <- gsub(pattern = "phi", replace = partAhelper_1(aux_parameter), x = aux_parameter_code)
aux_parameter_code <- gsub(pattern = "Phi", replace = partAhelper_2(aux_parameter), x = aux_parameter_code)
line_number_to_write_to <- grep("ParameterCodeAutoFillLineIndexer", read_lines("TemplatePartA.R"))
writeLines(c(read_lines("TemplatePartA.R", n_max = line_number_to_write_to), aux_parameter_code, read_lines("TemplatePartA.R", skip = line_number_to_write_to)), con="TemplatePartA.R")
writeLines(gsub(pattern = "ESHC", replace = new_abbreviation, x = read_lines("TemplatePartA.R")), "TemplatePartA.R")
}
createpartE(startvars, new_abbreviation)
}
# B ---------------------------------
createpartB <- function(parameternames, new_abbreviation){
code_template <- readLines("PartBSnippet.R")
for(aux_parameter in rev(parameternames)){
# parameternames <- c("g", "n")
aux_template <- code_template
aux_template <- gsub(pattern = "BS", replace = new_abbreviation, x = aux_template)
aux_template <- gsub(pattern = "tfp", replace = partAhelper_1(aux_parameter), x = aux_template)
partBhelper(aux_template[1], "auxspot1", "TemplatePartB.R")
partBhelper(aux_template[2], "auxspot2", "TemplatePartB.R")
partBhelper(aux_template[3], "auxspot3", "TemplatePartB.R")
}
writeLines(gsub(pattern = "BS", replace = new_abbreviation, x = read_lines("TemplatePartB.R")), "TemplatePartB.R")
# removing comma before closing parenthesis (syntax error) — not working — doing manually for now.
# final_template_version <- read_lines("TemplatePartB.R")
# final_template_version_modified <- gsub(pattern = ",$", replace = "", x = final_template_version)
# writeLines(final_template_version_modified, con="TemplatePartB.R")
}
partBhelper <- function(string_to_write, location_index_string, target_file_name){
aux_linenumber_to_write_to <- grep(location_index_string, read_lines(target_file_name))
writeLines(c(read_lines(target_file_name, n_max = aux_linenumber_to_write_to), string_to_write, read_lines(target_file_name, skip = aux_linenumber_to_write_to)), con=target_file_name)
}
# createpartB(c("g", "n"), "ESSRO")
# C ---------------------------------
createpartC <- function(starting_variables, new_abbreviation){
for(var in starting_variables){
aux_code <- paste(var, " = input$ESSOE_initval_", var, ",", sep = "")
aux_code <- gsub("ESSOE", new_abbreviation, x = aux_code)
partBhelper(aux_code, "auxspot1", "TemplatePartC.R")
}
}
# D ---------------------------------
createpartD <- function(new_abbreviation, new_name_of_simulation_function){
text  <- readLines("TemplatePartD.R")
text_modified  <- gsub(pattern = "ESHC", replace = new_abbreviation, x = text)
text_modified  <- gsub(pattern = "SimulateExtendedSolowModelHumanCapital", replace = new_name_of_simulation_function, x = text_modified)
writeLines(text_modified, con="TemplatePartD.R")
}
# createpartD("ESSRO", "SimulateExtendedSolowModelScarceResourceOil")
# E ---------------------------------
createpartE <- function(startingvariables, new_abbreviation){
for(i in rev(startingvariables)){
aux_code <- paste('numericInput("', new_abbreviation, '_initval_', i, '", "Initial Value of _____________", 5),', sep = "")
partBhelper(aux_code, "StartingValuesCodeAutoFillLineIndexer", "TemplatePartA.R")
}
}
# Create it all ---------------------------------
augmentShinyApp <- function(parameters, abbreviation, name_of_sim_function, startvars){
setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants/AutomatingPageCreation")
system(paste("mkdir", abbreviation))
system(paste("cp -R Template/. ", abbreviation, "/", sep = ""))
# Changing working directory to that newly created folder
setwd(paste(abbreviation))
createpartA(parameters, abbreviation, startvars)
createpartB(parameters, abbreviation)
createpartC(startvars, abbreviation)
createpartD(abbreviation, name_of_sim_function)
for(i in c(LETTERS[1:4])){
aux_file <- readLines("TemplatePartX.R" %>% str_replace("X", i))
write(paste("##########"), file = "CollectionOfSnippets.R", append = T)
write(paste("          ", "Part:", i), file = "CollectionOfSnippets.R", append = T)
write(paste("##########"), file = "CollectionOfSnippets.R", append = T)
write(aux_file, file = "CollectionOfSnippets.R", append = T)
}
file.rename("CollectionOfSnippets.R", paste(abbreviation, "CollectionOfSnippets.R", sep = ""))
}
# augmentShinyApp(c("g", "n", "sK"), "ESSMY", "my_custom_simulation_function", c("A", "K", "L"))
augmentShinyApp(c("alpha", "beta", "n", "g", "sE", "s", "delta"),
"ESSRO",
"SimulateExtendedSolowModelScarceResourceOil",
c("A", "K", "L", "R"))
