}else if(phi > 1){
NaN
}
}
simulation_correctness_checker(testsimulation[nrow(testsimulation), ],
paragrid[nrow(paragrid), ],
"ESEG")
# 0.8 compute steady state values and check correctness of simulations ---------------------------------
simulation_correctness_checker <- function(last_row_simulation, last_row_parameter, solow_variant){
# last_row for the last row of the simulation table (sim_table %>% tail(1))
# solow_variant for the different solow variants
aux <- tibble(variable = toString(NA), last_value = as.double(NA), steadystate = as.double(NA))
aux[[1,1]] <- NA
all_possible_steady_state_function_inputs <-
list(
delta = last_row_parameter[["delta"]],
s = last_row_parameter[["s"]],
sK = last_row_parameter[["sK"]],
sH = last_row_parameter[["sH"]],
sE = last_row_parameter[["sE"]],
n = last_row_parameter[["n"]],
B = last_row_parameter[["B"]],
r = last_row_parameter[["r"]],
g = last_row_parameter[["g"]],
alpha = last_row_parameter[["alpha"]],
beta = last_row_parameter[["beta"]],
kappa = last_row_parameter[["kappa"]],
phi = last_row_parameter[["phi"]],
YpW = last_row_simulation[["YpW"]],
RR = last_row_simulation[["RR"]],
w = last_row_simulation[["WR"]],
A = last_row_simulation[["TFP"]],
KpW = last_row_simulation[["KpW"]],
L = last_row_simulation[["L"]],
X = last_row_parameter[["X"]],
R = last_row_simulation[["R"]]
)
if(solow_variant == "BS") {
# Remark: The selections variable_encoder(meta_GS_variables[c(6, 7, 8, 9)]) can be generally adjusted to simply c("KpW", "YpW", ...) as done for some
aux_steadystate_variables <- c("KpW", "YpW", "CpW", "WR", "RR")
}else if(solow_variant == "GS"){
aux_steadystate_variables <- c("KpW", "YpW", "CpW", "WR", "RR", "KpEW", "YpEW")
}else if(solow_variant == "ESSOE"){
aux_steadystate_variables <- c("KpW", "YpW", "WR", "VpW", "FpW")
}else if(solow_variant == "ESHC"){
aux_steadystate_variables <- c("KpEW", "HpEW", "YpEW", "YpW", "CpW") # WR and RR missing
}else if(solow_variant == "ESSRL"){
aux_steadystate_variables <- c("CtO", "YpW") # WR and RR missing
}else if(solow_variant == "ESSRO"){
aux_steadystate_variables <- c("YpW")
}else if(solow_variant == "ESSROL"){
aux_steadystate_variables <- c("gY")
}else if(solow_variant == "ESEG"){
if(last_row_parameter[["phi"]] < 0.95){
aux_steadystate_variables <- c("KpEW", "gYpW")
}else if(last_row_parameter[["phi"]] %>% between(0.95, 1)){
aux_steadystate_variables <- c("gYpW")
}
}
for(i in aux_steadystate_variables){
aux_function_name <- paste(solow_variant, "_SS_", i, sep = "")
SS_val_computed <- doCall(aux_function_name, args = all_possible_steady_state_function_inputs)
aux <- aux %>% complete(variable = i, last_value = last_row_simulation[[i]], steadystate = SS_val_computed)
}
aux <- aux %>% drop_na()
aux <- aux %>% mutate_at(vars(steadystate, last_value), round, digits = 2)
aux <- aux %>% mutate(is_same = case_when(
last_value == steadystate ~ "Equal",
TRUE ~ "Different"
))
aux <- aux %>% rename("Theoretic Value" = steadystate,
"Simulated Value" = last_value,
"Variable" = variable)
return(aux)
}
# # Testing
phi <- 0.9999
n <- 0.01
delta <- 0.15
s <- 0.2
testnamel <- c("alpha", "phi", "delta", "n", "s")
testivl <- c(1/3, phi, delta, n, s)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 200
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1)
testsimulation <- SimulateExtendedSolowModelEndogenousGrowth(testgridalt, np,startvals)
source("HelperFunctions.R")
(1 + n)^(1/(1- phi)) > 1- delta
(testsimulation[["TFP"]][[201]] - testsimulation[["TFP"]][[200]])/testsimulation[["TFP"]][[200]]
ESEG_SS_gY(n, phi, 2, 2, 2)
# # Testing
phi <- 0.9999
n <- 0
delta <- 0.15
s <- 0.2
testnamel <- c("alpha", "phi", "delta", "n", "s")
testivl <- c(1/3, phi, delta, n, s)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 200
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1)
testsimulation <- SimulateExtendedSolowModelEndogenousGrowth(testgridalt, np,startvals)
source("HelperFunctions.R")
(1 + n)^(1/(1- phi)) > 1- delta
(testsimulation[["TFP"]][[201]] - testsimulation[["TFP"]][[200]])/testsimulation[["TFP"]][[200]]
ESEG_SS_gY(n, phi, 2, 2, 2)
simulation_correctness_checker(testsimulation[nrow(testsimulation), ],
paragrid[nrow(paragrid), ],
"ESEG")
(testsimulation[["TFP"]][[201]] - testsimulation[["TFP"]][[200]])/testsimulation[["TFP"]][[200]]
ESEG_SS_gY(n, phi, 2, 2, 2)
ESEG_SS_gYpW <- function(n, phi, s, A, delta){
if(phi < 1){
(1 + n)^((phi)/(1- phi)) - 1
}else if(i %>% between(0.95, 1)){
s * A - delta
}else if(phi > 1){
NaN
}
}
ESEG_SS_gYpW(n, phi, s, testsimulation[["TFP"]][[201]], delta)
ESEG_SS_gYpW(n, phi, s, testsimulation[["TFP"]][[201]], delta)
ESEG_SS_gYpW <- function(n, phi, s, A, delta){
if(phi < 1){
(1 + n)^((phi)/(1- phi)) - 1
}else if(i %>% between(0.95, 1)){
s * A - delta
}else if(phi > 1){
NaN
}
}
ESEG_SS_gYpW(n, phi, s, testsimulation[["TFP"]][[201]], delta)
## Setup =================================
# Clean Start ---------------------------------
# rm(list = ls())
# Set Path
# setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants")
# getwd()
# Loading Libraries ---------------------------------
# temporarily abandoned package managing function
# detach_package <- function(pkg, character.only = FALSE)
# {
#   if(!character.only)
#   {
#     pkg <- deparse(substitute(pkg))
#   }
#   search_item <- paste("package", pkg, sep = ":")
#   while(search_item %in% search())
#   {
#     detach(search_item, unload = TRUE, character.only = TRUE)
#   }
# }
# detach_package("broom", TRUE)
# broom::augment()
# package_organiser("broom")
# package_organiser <- function(string){
#   if(!require(string, character.only = TRUE)){
#   install.packages(string)
#   library(string, character.only = TRUE)
# }else{
#   library(string, character.only = TRUE)
# }
# }
# #
library(tidyverse)
library(shiny)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
library(tidyverse)
# library(modelr)
library(ggplot2)
# library(stargazer)
library(R.utils)
# library(reactlog)
# reactlog_enable()
# ggplot2 Setup ---------------------------------
theme_set(
theme_classic() +
theme(
axis.ticks.length = unit(-0.25, "cm"),
axis.text.x = element_text(margin = unit(c(0.4, 0, 0, 0), "cm")),
axis.text.y = element_text(margin = unit(c(0, 0.4, 0, 0), "cm")),
axis.line = element_blank(),
panel.grid.major.y = element_line(linetype = 2),
plot.title = element_text(hjust = 0.5),
text = element_text(family = "serif"),
# legend.justification = c("right", "top"),
legend.position = "top",
# legend.position = c(1, 1),
# legend.position = c(.98, .98),
legend.background = element_rect(fill = NA, color = "black"),
panel.border = element_rect(fill = NA, size = 1.25),
strip.text = element_text(size = 12)
# legend.margin = margin(6, 10, 6, 6)
# legend.box.background = element_rect(colour = "black")
)
)
# Sourcing Simulation Functions and Helper Functions ---------------------------------
source("HelperFunctions.R")
source("SimulationFunctions/BS.R")
source("SimulationFunctions/GS.R")
source("SimulationFunctions/ESSOE.R")
source("SimulationFunctions/ESHC.R")
source("SimulationFunctions/ESSRO.R")
source("SimulationFunctions/ESSRL.R")
source("SimulationFunctions/ESSROL.R")
source("CompareModels.R")
# Essential Sourcing Function ---------------------------------
source("ShinyAppSourcer.R")
# getShinyPart <- function(kind, which, n_ModelComparison=0) {
#   # kind for "server" or "tab"
#   # which for the abbreviation of the respective part
#   # kind <- "S"
#   # which <- "BS"
#   # n_ModelComparison <- 1
#   if (kind %in% c("S", "T", "D")) {} else {
#     stop("The entered value for 'kind' in getShinyPart() is not defined.")
#   }
#   if(kind == "D" && n_ModelComparison == 0){stop("When using 'D' in getShinyPart() make sure to deliver an appropriate value to n_ModelComparison")}
#   source_part1 <- if(kind == "T"){"Tabs"}else if(kind == "S"){"ServerParts"}else if(kind == "D"){"DynamicInterfaces"}
#   source_part2 <- if(kind == "T"){"Tab.R"}else if(kind == "S"){"Server.R"}else if(kind == "D"){"DynamicInterface.R"}
#   path_to_source <- paste0(
#     source_part1,
#     "/",
#     ifelse(kind == "D", paste0("Group", n_ModelComparison, "/"), ""),
#     which,
#     source_part2
#   )
#
#   if(kind == "T"){
#     source(path_to_source)
#     return(get(paste0(which, "Tab")))
#   }else if(kind == "S"){
#     # source(path_to_source, local = TRUE)
#   }else if(kind == "D"){
#     source(path_to_source)
#     return(get(paste0(which, "DynamicInterface")))
#   }
# }
# Shiny App =================================
shinyApp(
ui = fluidPage(
# tags$head(
#   tags$style(
#     "#inTabset {
#     position: fixed;
#     width: 100%;
#     background-color: white;
#     top: 0;
#     }",
#     ".tab-content  {
#     margin-top: 80px;
#   }"
#   )
# ),
theme = shinytheme("cerulean"),
titlePanel("Solow Growth Models in Macroeconomic Theory"),
# Loading Tabs ---------------------------------
tabsetPanel(type = "pills",
# id = "inTabset",
getShinyPart("T", "StartPage"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
getShinyPart("T", "ESSRL"),
getShinyPart("T", "ESSROL"),
getShinyPart("T", "Comparison")
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ESSROLServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
session$onSessionEnded(stopApp)
}
)
## Setup =================================
# Clean Start ---------------------------------
# rm(list = ls())
# Set Path
setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariantsWorkspace")
# getwd()
####################################
# Remark: simulation_correctness checker underwent a change in setup! Change the function calls to incorporate the SolowVariant package as published on github.
####################################
# Loading Libraries ---------------------------------
# temporarily abandoned package managing function
# detach_package <- function(pkg, character.only = FALSE)
# {
#   if(!character.only)
#   {
#     pkg <- deparse(substitute(pkg))
#   }
#   search_item <- paste("package", pkg, sep = ":")
#   while(search_item %in% search())
#   {
#     detach(search_item, unload = TRUE, character.only = TRUE)
#   }
# }
# detach_package("broom", TRUE)
# broom::augment()
# package_organiser("broom")
# package_organiser <- function(string){
#   if(!require(string, character.only = TRUE)){
#   install.packages(string)
#   library(string, character.only = TRUE)
# }else{
#   library(string, character.only = TRUE)
# }
# }
# #
library(SolowVariants)
library(tidyverse)
library(shiny)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
# library(tidyverse)
# library(modelr)
# library(ggplot2)
# library(stargazer)
# library(R.utils)
# library(reactlog)
# reactlog_enable()
# ggplot2 Setup ---------------------------------
set_default_theme()
# Sourcing Simulation Functions and Helper Functions ---------------------------------
source("CompareModels.R")
# Essential Sourcing Function ---------------------------------
source("ShinyAppSourcer.R")
# Shiny App =================================
shinyApp(
ui = fluidPage(
# tags$head(
#   tags$style(
#     "#inTabset {
#     position: fixed;
#     width: 100%;
#     background-color: white;
#     top: 0;
#     }",
#     ".tab-content  {
#     margin-top: 80px;
#   }"
#   )
# ),
theme = shinytheme("cerulean"),
titlePanel("Solow Growth Models in Macroeconomic Theory"),
# Loading Tabs ---------------------------------
tabsetPanel(type = "pills",
# id = "inTabset",
getShinyPart("T", "StartPage"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
getShinyPart("T", "ESSRL"),
getShinyPart("T", "ESSROL"),
getShinyPart("T", "ESEG"),
getShinyPart("T", "ESEGRomer"),
getShinyPart("T", "ESEGCozziOne"),
# getShinyPart("T", "ESEGCozziTwo"),
getShinyPart("T", "Comparison")
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ESSROLServer.R", local = TRUE)
source("ServerParts/ESEGServer.R", local = TRUE)
source("ServerParts/ESEGRomerServer.R", local = TRUE)
source("ServerParts/ESEGCozziOneServer.R", local = TRUE)
# source("ServerParts/ESEGCozziTwoServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
session$onSessionEnded(stopApp)
}
)
devtools::install_github("SebastianBehrens/SolowVariants", force = T, build_vignettes = T)
## Setup =================================
# Clean Start ---------------------------------
# rm(list = ls())
# Set Path
setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariantsWorkspace")
# getwd()
####################################
# Remark: simulation_correctness checker underwent a change in setup! Change the function calls to incorporate the SolowVariant package as published on github.
####################################
# Loading Libraries ---------------------------------
# temporarily abandoned package managing function
# detach_package <- function(pkg, character.only = FALSE)
# {
#   if(!character.only)
#   {
#     pkg <- deparse(substitute(pkg))
#   }
#   search_item <- paste("package", pkg, sep = ":")
#   while(search_item %in% search())
#   {
#     detach(search_item, unload = TRUE, character.only = TRUE)
#   }
# }
# detach_package("broom", TRUE)
# broom::augment()
# package_organiser("broom")
# package_organiser <- function(string){
#   if(!require(string, character.only = TRUE)){
#   install.packages(string)
#   library(string, character.only = TRUE)
# }else{
#   library(string, character.only = TRUE)
# }
# }
# #
library(SolowVariants)
library(tidyverse)
library(shiny)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
# library(tidyverse)
# library(modelr)
# library(ggplot2)
# library(stargazer)
# library(R.utils)
# library(reactlog)
# reactlog_enable()
# ggplot2 Setup ---------------------------------
set_default_theme()
# Sourcing Simulation Functions and Helper Functions ---------------------------------
source("CompareModels.R")
# Essential Sourcing Function ---------------------------------
source("ShinyAppSourcer.R")
# Shiny App =================================
shinyApp(
ui = fluidPage(
# tags$head(
#   tags$style(
#     "#inTabset {
#     position: fixed;
#     width: 100%;
#     background-color: white;
#     top: 0;
#     }",
#     ".tab-content  {
#     margin-top: 80px;
#   }"
#   )
# ),
theme = shinytheme("cerulean"),
titlePanel("Solow Growth Models in Macroeconomic Theory"),
# Loading Tabs ---------------------------------
tabsetPanel(type = "pills",
# id = "inTabset",
getShinyPart("T", "StartPage"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
getShinyPart("T", "ESSRL"),
getShinyPart("T", "ESSROL"),
getShinyPart("T", "ESEG"),
getShinyPart("T", "ESEGRomer"),
getShinyPart("T", "ESEGCozziOne"),
# getShinyPart("T", "ESEGCozziTwo"),
getShinyPart("T", "Comparison")
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ESSROLServer.R", local = TRUE)
source("ServerParts/ESEGServer.R", local = TRUE)
source("ServerParts/ESEGRomerServer.R", local = TRUE)
source("ServerParts/ESEGCozziOneServer.R", local = TRUE)
# source("ServerParts/ESEGCozziTwoServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
session$onSessionEnded(stopApp)
}
)
library(SolowVariants)
