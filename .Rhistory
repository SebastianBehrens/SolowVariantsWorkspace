RR = last_row_simulation[["RR"]],
w = last_row_simulation[["WR"]],
A = last_row_simulation[["TFP"]],
KpW = last_row_simulation[["KpW"]],
L = last_row_simulation[["L"]],
X = last_row_parameter[["X"]],
R = last_row_simulation[["R"]]
)
aux_internally <- doCall(aux_function_name, args = all_possible_steady_state_function_inputs )
return(aux_internally)
}
ESSRO_SS_KpW_new <- function(A, E, L, n, delta, s, alpha, beta, epsilon){
( (n+delta)/(s * (E/L)^epsilon * A^beta ) )^(1/(alpha-1))
}
ESSRO_MF_YpW_new <- function(k, A, E, L, alpha, beta, epsilon){
k^alpha * (E/L)^epsilon * A^beta
}
aux_checker <- function(sim_data, parameter_grid, aux_function_name){
# Function ---------------------------------
last_row_simulation <- sim_data[nrow(sim_data), ]
last_row_parameter <- parameter_grid[nrow(parameter_grid), ]
all_possible_steady_state_function_inputs <-
list(
delta = last_row_parameter[["delta"]],
s = last_row_parameter[["s"]],
sK = last_row_parameter[["sK"]],
sH = last_row_parameter[["sH"]],
sE = last_row_parameter[["sE"]],
n = last_row_parameter[["n"]],
B = last_row_parameter[["B"]],
r = last_row_parameter[["r"]],
g = last_row_parameter[["g"]],
alpha = last_row_parameter[["alpha"]],
beta = last_row_parameter[["beta"]],
kappa = last_row_parameter[["kappa"]],
phi = last_row_parameter[["phi"]],
YpW = last_row_simulation[["YpW"]],
RR = last_row_simulation[["RR"]],
w = last_row_simulation[["WR"]],
A = last_row_simulation[["TFP"]],
KpW = last_row_simulation[["KpW"]],
L = last_row_simulation[["L"]],
X = last_row_parameter[["X"]],
R = last_row_simulation[["R"]],
E = last_row_parameter[["sE"]] * last_row_simulation[["R"]]
)
aux_internally <- doCall(aux_function_name, args = all_possible_steady_state_function_inputs )
return(aux_internally)
}
aux_checker(aux_simulation, aux_parameter_grid, "ESSRO_SS_KpW_new")
aux_checker <- function(sim_data, parameter_grid, aux_function_name){
# Function ---------------------------------
last_row_simulation <- sim_data[nrow(sim_data), ]
last_row_parameter <- parameter_grid[nrow(parameter_grid), ]
all_possible_steady_state_function_inputs <-
list(
delta = last_row_parameter[["delta"]],
s = last_row_parameter[["s"]],
sK = last_row_parameter[["sK"]],
sH = last_row_parameter[["sH"]],
sE = last_row_parameter[["sE"]],
n = last_row_parameter[["n"]],
B = last_row_parameter[["B"]],
r = last_row_parameter[["r"]],
g = last_row_parameter[["g"]],
alpha = last_row_parameter[["alpha"]],
beta = last_row_parameter[["beta"]],
kappa = last_row_parameter[["kappa"]],
phi = last_row_parameter[["phi"]],
YpW = last_row_simulation[["YpW"]],
RR = last_row_simulation[["RR"]],
w = last_row_simulation[["WR"]],
A = last_row_simulation[["TFP"]],
KpW = last_row_simulation[["KpW"]],
L = last_row_simulation[["L"]],
X = last_row_parameter[["X"]],
R = last_row_simulation[["R"]],
E = last_row_parameter[["sE"]] * last_row_simulation[["R"]],
epsilon = 1- last_row_parameter[["alpha"]] - last_row_parameter[["beta"]]
)
aux_internally <- doCall(aux_function_name, args = all_possible_steady_state_function_inputs )
return(aux_internally)
}
aux_checker(aux_simulation, aux_parameter_grid, "ESSRO_SS_KpW_new")
# Visualise some variables ---------------------------------
VisualiseSimulation(aux_simulation,
c("YpW", "KpW", "R"),
"free")
steadystate_checker(aux_simulation, aux_parameter_grid, "ESSRO")
aux_checker <- function(sim_data, parameter_grid, aux_function_name){
# Function ---------------------------------
last_row_simulation <- sim_data[nrow(sim_data), ]
last_row_parameter <- parameter_grid[nrow(parameter_grid), ]
all_possible_steady_state_function_inputs <-
list(
delta = last_row_parameter[["delta"]],
s = last_row_parameter[["s"]],
sK = last_row_parameter[["sK"]],
sH = last_row_parameter[["sH"]],
sE = last_row_parameter[["sE"]],
n = last_row_parameter[["n"]],
B = last_row_parameter[["B"]],
r = last_row_parameter[["r"]],
g = last_row_parameter[["g"]],
alpha = last_row_parameter[["alpha"]],
beta = last_row_parameter[["beta"]],
kappa = last_row_parameter[["kappa"]],
phi = last_row_parameter[["phi"]],
YpW = last_row_simulation[["YpW"]],
RR = last_row_simulation[["RR"]],
w = last_row_simulation[["WR"]],
A = last_row_simulation[["TFP"]],
KpW = last_row_simulation[["KpW"]],
L = last_row_simulation[["L"]],
X = last_row_parameter[["X"]],
R = last_row_simulation[["R"]],
E = last_row_parameter[["sE"]] * last_row_simulation[["R"]],
epsilon = 1- last_row_parameter[["alpha"]] - last_row_parameter[["beta"]]
)
aux_internally <- doCall(aux_function_name, args = all_possible_steady_state_function_inputs )
return(aux_internally)
}
aux_checker(aux_simulation, aux_parameter_grid, "ESSRO_SS_KpW_new")
aux_checker(aux_simulation, aux_parameter_grid, "ESSRO_SS_KpW_new") == aux_checker(aux_simulation, aux_parameter_grid, "ESSRO_SS_YpW")
aux_checker(aux_simulation, aux_parameter_grid, "ESSRO_SS_KpW_new")
aux_checker(aux_simulation, aux_parameter_grid, "ESSRO_SS_YpW")
################################################
aux_np <- 200
aux_parameter_grid <-
create_parameter_grid(
c("alpha", "beta", "n", "g", "sE", "s", "delta"),
c(1 / 3, 1 / 4, 0.005, 0.03, 0.4, 0.15, 0.2),
c(NA, NA, NA, NA, NA, NA, NA),
c(NA, NA, NA, NA, NA, NA, NA),
aux_np
)
# Setting starting values for K and L ---------------------------------
aux_startvalues <- list(A = 1, K = 1, L = 1, R = 1)
# Simulate the basic Solow growth model ---------------------------------
aux_simulation <- SimulateExtendedSolowModelScarceResourceOil(aux_parameter_grid, aux_np, aux_startvalues)
# Visualise some variables ---------------------------------
VisualiseSimulation(aux_simulation,
c("YpW", "KpW", "R"),
"free")
steadystate_checker(aux_simulation, aux_parameter_grid, "ESSRO")
aux_checker <- function(sim_data, parameter_grid, aux_function_name){
# Function ---------------------------------
last_row_simulation <- sim_data[nrow(sim_data), ]
last_row_parameter <- parameter_grid[nrow(parameter_grid), ]
all_possible_steady_state_function_inputs <-
list(
delta = last_row_parameter[["delta"]],
s = last_row_parameter[["s"]],
sK = last_row_parameter[["sK"]],
sH = last_row_parameter[["sH"]],
sE = last_row_parameter[["sE"]],
n = last_row_parameter[["n"]],
B = last_row_parameter[["B"]],
r = last_row_parameter[["r"]],
g = last_row_parameter[["g"]],
alpha = last_row_parameter[["alpha"]],
beta = last_row_parameter[["beta"]],
kappa = last_row_parameter[["kappa"]],
phi = last_row_parameter[["phi"]],
YpW = last_row_simulation[["YpW"]],
RR = last_row_simulation[["RR"]],
w = last_row_simulation[["WR"]],
A = last_row_simulation[["TFP"]],
KpW = last_row_simulation[["KpW"]],
L = last_row_simulation[["L"]],
X = last_row_parameter[["X"]],
R = last_row_simulation[["R"]],
E = last_row_parameter[["sE"]] * last_row_simulation[["R"]],
epsilon = 1- last_row_parameter[["alpha"]] - last_row_parameter[["beta"]]
)
aux_internally <- doCall(aux_function_name, args = all_possible_steady_state_function_inputs )
return(aux_internally)
}
aux_checker(aux_simulation, aux_parameter_grid, "ESSRO_SS_KpW_new")
aux_checker(aux_simulation, aux_parameter_grid, "ESSRO_SS_YpW")
# package_organiser <- function(string){
#   if(!require(string, character.only = TRUE)){
#   install.packages(string)
#   library(string, character.only = TRUE)
# }else{
#   library(string, character.only = TRUE)
# }
# }
# #
# devtools::install_github("SebastianBehrens/SolowVariants", force = T, build_vignettes = T)
library(SolowVariants)
# library(tidyverse)
library(shiny)
library(shinydashboard)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
# library(tidyverse)
# library(modelr)
# library(ggplot2)
# library(stargazer)
# library(R.utils)
# library(reactlog)
# reactlog_enable()
# ggplot2 Setup ---------------------------------
set_default_theme()
# Sourcing Simulation Functions and Helper Functions ---------------------------------
source("CompareModels.R")
source("AdditionalHelperFunctions.R")
# Essential Sourcing Function ---------------------------------
source("ShinyAppSourcer.R")
# Shiny App =================================
shinyApp(
ui = dashboardPage(
# tags$head(
#   tags$style(
#     "#inTabset {
#     position: fixed;
#     width: 100%;
#     background-color: white;
#     top: 0;
#     }",
#     ".tab-content  {
#     margin-top: 80px;
#   }"
#   )
# ),
# Loading Tabs ---------------------------------
dashboardHeader(title = "Solow Growth Models"),
dashboardSidebar(
width = 270,
# collapsed = TRUE,
sidebarMenu(
menuItem("Start Page", tabName = "Start"),
menuItem("Explanatory Remarks", tabName = "Explanation"),
h4("Select a Solow Variant", align = "center"),
menuItem("BS", tabName = "BS"),
menuItem("GS", tabName = "GS"),
menuItem("ESSOE", tabName = "ESSOE"),
menuItem("ESHC", tabName = "ESHC"),
menuItem("ESSRO", tabName = "ESSRO"),
menuItem("ESSRL", tabName = "ESSRL"),
menuItem("ESSROL", tabName = "ESSROL"),
menuItem("ESEG", tabName = "ESEG"),
menuItem("ESEG (Romer Extension)", tabName = "ESEGRomer"),
menuItem("ESEG (Cozzi Extension)", tabName = "ESEGCozziOne"),
menuItem("ESEG (Cozzi Hybrid Model)", tabName = "ESEGCozziTwo"),
h4("Compare Two Models", align = "center"),
menuItem("Comparison", tabName = "Comparison")
)
),
dashboardBody(
tabItems(
getShinyPart("T", "StartPage"),
getShinyPart("T", "Explanations"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
getShinyPart("T", "ESSRL"),
getShinyPart("T", "ESSROL"),
getShinyPart("T", "ESEG"),
getShinyPart("T", "ESEGRomer"),
getShinyPart("T", "ESEGCozziOne"),
getShinyPart("T", "ESEGCozziTwo"),
getShinyPart("T", "Comparison")
)
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ESSROLServer.R", local = TRUE)
source("ServerParts/ESEGServer.R", local = TRUE)
source("ServerParts/ESEGRomerServer.R", local = TRUE)
source("ServerParts/ESEGCozziOneServer.R", local = TRUE)
source("ServerParts/ESEGCozziTwoServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
# session$onSessionEnded(stopApp)
}
)
library(shinydashboard)
install.packages("shinydashboard")
# package_organiser <- function(string){
#   if(!require(string, character.only = TRUE)){
#   install.packages(string)
#   library(string, character.only = TRUE)
# }else{
#   library(string, character.only = TRUE)
# }
# }
# #
# devtools::install_github("SebastianBehrens/SolowVariants", force = T, build_vignettes = T)
library(SolowVariants)
# library(tidyverse)
library(shiny)
library(shinydashboard)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
# library(tidyverse)
# library(modelr)
# library(ggplot2)
# library(stargazer)
# library(R.utils)
# library(reactlog)
# reactlog_enable()
# ggplot2 Setup ---------------------------------
set_default_theme()
# Sourcing Simulation Functions and Helper Functions ---------------------------------
source("CompareModels.R")
source("AdditionalHelperFunctions.R")
# Essential Sourcing Function ---------------------------------
source("ShinyAppSourcer.R")
# Shiny App =================================
shinyApp(
ui = dashboardPage(
# tags$head(
#   tags$style(
#     "#inTabset {
#     position: fixed;
#     width: 100%;
#     background-color: white;
#     top: 0;
#     }",
#     ".tab-content  {
#     margin-top: 80px;
#   }"
#   )
# ),
# Loading Tabs ---------------------------------
dashboardHeader(title = "Solow Growth Models"),
dashboardSidebar(
width = 270,
# collapsed = TRUE,
sidebarMenu(
menuItem("Start Page", tabName = "Start"),
menuItem("Explanatory Remarks", tabName = "Explanation"),
h4("Select a Solow Variant", align = "center"),
menuItem("BS", tabName = "BS"),
menuItem("GS", tabName = "GS"),
menuItem("ESSOE", tabName = "ESSOE"),
menuItem("ESHC", tabName = "ESHC"),
menuItem("ESSRO", tabName = "ESSRO"),
menuItem("ESSRL", tabName = "ESSRL"),
menuItem("ESSROL", tabName = "ESSROL"),
menuItem("ESEG", tabName = "ESEG"),
menuItem("ESEG (Romer Extension)", tabName = "ESEGRomer"),
menuItem("ESEG (Cozzi Extension)", tabName = "ESEGCozziOne"),
menuItem("ESEG (Cozzi Hybrid Model)", tabName = "ESEGCozziTwo"),
h4("Compare Two Models", align = "center"),
menuItem("Comparison", tabName = "Comparison")
)
),
dashboardBody(
tabItems(
getShinyPart("T", "StartPage"),
getShinyPart("T", "Explanations"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
getShinyPart("T", "ESSRL"),
getShinyPart("T", "ESSROL"),
getShinyPart("T", "ESEG"),
getShinyPart("T", "ESEGRomer"),
getShinyPart("T", "ESEGCozziOne"),
getShinyPart("T", "ESEGCozziTwo"),
getShinyPart("T", "Comparison")
)
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ESSROLServer.R", local = TRUE)
source("ServerParts/ESEGServer.R", local = TRUE)
source("ServerParts/ESEGRomerServer.R", local = TRUE)
source("ServerParts/ESEGCozziOneServer.R", local = TRUE)
source("ServerParts/ESEGCozziTwoServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
# session$onSessionEnded(stopApp)
}
)
# package_organiser <- function(string){
#   if(!require(string, character.only = TRUE)){
#   install.packages(string)
#   library(string, character.only = TRUE)
# }else{
#   library(string, character.only = TRUE)
# }
# }
# #
# devtools::install_github("SebastianBehrens/SolowVariants", force = T, build_vignettes = T)
library(SolowVariants)
# library(tidyverse)
library(shiny)
library(shinydashboard)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
# library(tidyverse)
# library(modelr)
# library(ggplot2)
# library(stargazer)
# library(R.utils)
# library(reactlog)
# reactlog_enable()
# ggplot2 Setup ---------------------------------
set_default_theme()
# Sourcing Simulation Functions and Helper Functions ---------------------------------
source("CompareModels.R")
source("AdditionalHelperFunctions.R")
# Essential Sourcing Function ---------------------------------
source("ShinyAppSourcer.R")
# Shiny App =================================
shinyApp(
ui = dashboardPage(
# tags$head(
#   tags$style(
#     "#inTabset {
#     position: fixed;
#     width: 100%;
#     background-color: white;
#     top: 0;
#     }",
#     ".tab-content  {
#     margin-top: 80px;
#   }"
#   )
# ),
# Loading Tabs ---------------------------------
dashboardHeader(title = "Solow Growth Models"),
dashboardSidebar(
width = 270,
# collapsed = TRUE,
sidebarMenu(
menuItem("Start Page", tabName = "Start"),
menuItem("Explanatory Remarks", tabName = "Explanation"),
h4("Select a Solow Variant", align = "center"),
menuItem("BS", tabName = "BS"),
menuItem("GS", tabName = "GS"),
menuItem("ESSOE", tabName = "ESSOE"),
menuItem("ESHC", tabName = "ESHC"),
menuItem("ESSRO", tabName = "ESSRO"),
menuItem("ESSRL", tabName = "ESSRL"),
menuItem("ESSROL", tabName = "ESSROL"),
menuItem("ESEG", tabName = "ESEG"),
menuItem("ESEG (Romer Extension)", tabName = "ESEGRomer"),
menuItem("ESEG (Cozzi Extension)", tabName = "ESEGCozziOne"),
menuItem("ESEG (Cozzi Hybrid Model)", tabName = "ESEGCozziTwo"),
h4("Compare Two Models", align = "center"),
menuItem("Comparison", tabName = "Comparison")
)
),
dashboardBody(
tabItems(
getShinyPart("T", "StartPage"),
getShinyPart("T", "Explanations"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
getShinyPart("T", "ESSRL"),
getShinyPart("T", "ESSROL"),
getShinyPart("T", "ESEG"),
getShinyPart("T", "ESEGRomer"),
getShinyPart("T", "ESEGCozziOne"),
getShinyPart("T", "ESEGCozziTwo"),
getShinyPart("T", "Comparison")
)
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ESSROLServer.R", local = TRUE)
source("ServerParts/ESEGServer.R", local = TRUE)
source("ServerParts/ESEGRomerServer.R", local = TRUE)
source("ServerParts/ESEGCozziOneServer.R", local = TRUE)
source("ServerParts/ESEGCozziTwoServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
# session$onSessionEnded(stopApp)
}
)
devtools::install_github("SebastianBehrens/SolowVariants", force = T, build_vignettes = T)
devtools::install_github("SebastianBehrens/SolowVariants", force = T, build_vignettes = T)
runApp('MacroModels.R')
