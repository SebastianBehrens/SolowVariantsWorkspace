)
nvl <- c(if(input$BS_changeinparam_tfp) input$BS_pc_tfp_newval else NA,
if(input$BS_changeinparam_alpha) input$BS_pc_alpha_newval else NA,
if(input$BS_changeinparam_delta) input$BS_pc_delta_newval else NA,
if(input$BS_changeinparam_popgrowth) input$BS_pc_popgrowth_newval else NA,
if(input$BS_changeinparam_savings) input$BS_pc_savings_newval else NA)
create_parameter_grid(
parameternames,
initialparametervalues,
pfcl,
nvl,
input$BS_initparam_periods
)
})
BS_vtv_processed_encoded <- reactive({
case_when(
input$BS_vtv == "Capital Stock" ~ "K",
input$BS_vtv == "Labor Stock" ~ "L",
input$BS_vtv == "Wage Rate" ~ "WR",
input$BS_vtv == "Rental Rate" ~ "RR",
input$BS_vtv == "Output" ~ "Y",
input$BS_vtv == "Log of Output" ~ "logY",
input$BS_vtv == "Growth Rate of Output" ~ "gY",
input$BS_vtv == "Output per Worker" ~ "YpW",
input$BS_vtv == "Log of Output per Worker" ~ "logYpW",
input$BS_vtv == "Growth Rate of Output per Worker" ~ "gYpW",
input$BS_vtv == "Output per Effective Worker" ~ "YpEW",
input$BS_vtv == "Log of Output per Effective Worker" ~ "logYpEW",
input$BS_vtv == "Growth Rate of Output per Effective Worker" ~ "gYpEW"
)
})
BS_vtv_processed_sim <- reactive({
aux <- BS_vtv_processed_encoded()
aux_non_standard_detect <- aux %in% c("L", "K", "RR", "WR", "Y")
aux[!aux_non_standard_detect]
})
output$test <- renderText({BS_vtv_processed_sim()})
BS_aux_data <- reactive({
SimulateBasicSolowModel(testgrid(), input$BS_initparam_periods, BS_vtv_processed_sim(),
list(K = input$BS_initval_K, L = input$BS_initval_K))
})
output$BS_Data <- renderDataTable({BS_aux_data() %>% mutate_all(round, digits = 3)})
BS_vtv_processed_viz <- reactive({
BS_vtv_processed_encoded()
})
output$BS_Viz <- renderPlot({VisualiseSimulation(BS_aux_data(), BS_vtv_processed_viz(), input$scales_free_or_fixed)})
}
library(shiny)
# install.packages("shinythemes")
# install.packages("hexbin")
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
# install.packages("DT")
# install.packages("MathJax")
#library()
# Plotting Setup =================================
library(tidyverse)
library(modelr)
library(ggplot2)
library(stargazer)
theme_set(
theme_classic() +
theme(
axis.ticks.length = unit(-0.25, "cm"),
axis.text.x = element_text(margin = unit(c(0.4,0,0,0), "cm")),
axis.text.y = element_text(margin = unit(c(0,0.4,0,0), "cm")),
axis.line = element_blank(),
panel.grid.major.y = element_line(linetype = 2),
plot.title = element_text(hjust = 0.5),
text = element_text(family = "serif"),
legend.justification = c("right", "top"),
# legend.position = c(1, 1),
legend.position = c(.98, .98),
legend.background = element_rect(fill = NA, color = "black"),
panel.border = element_rect(fill = NA, size = 1.25),
strip.text = element_text(size = 12)
# legend.margin = margin(6, 10, 6, 6)
# legend.box.background = element_rect(colour = "black")
)
)
# Reading in Functions =================================
# getwd()
# setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants")
source("RawModelFunction.R")
# Selection Options =================================
# Basic Solow Model ---------------------------------
meta_BS_variables <-
c(
"Capital Stock",
"Labor Stock",
"Wage Rate",
"Rental Rate",
"Output",
"Output per Worker",
"Output per Effective Worker",
"Log of Output",
"Log of Output per Worker",
"Log of Output per Effective Worker",
"Growth Rate of Output",
"Growth Rate of Output per Worker",
"Growth Rate of Output per Effective Worker"
)
meta_BS_parameters <- c("TFP", "alpha", "delta", "savings rate", "population growth") # ac for available changes (referring to changes in parameters)
# Shiny App =================================
shinyApp(
# FrontEnd =================================
ui = fluidPage(
theme = shinytheme("cerulean"),
titlePanel("Growth Models in Macroeconomic Theory"),
tabsetPanel(
# Start Page ---------------------------------
tabPanel("Start Page", fluid = TRUE,
h3("This Shiny App aims to do the following:"),
tags$ul(
tags$li("Present macroeconomic growth models in their simplest form"),
tags$li("Present simulations"),
tags$li("Make the models and their inner workers more visual")
)
),
# Basic Solow Model ---------------------------------
tabPanel("Basic Solow Model", fluid = TRUE,
sidebarLayout(
sidebarPanel(width = 2,
titlePanel("Variables"),
checkboxGroupInput("BS_vtv",
label = "",
choices = meta_BS_variables,
selected = meta_BS_variables[1:5]),
hr(),
selectInput("scales_free_or_fixed",label = "scales free or fixed?", choices = c("fixed", "free"), selected = "free"),
hr(),
titlePanel("Starting Values of Stocks"),
numericInput("BS_initval_L", "Initial Value of Labor Stock", 10),
numericInput("BS_initval_K", "Initial Value of Capital Stock", 10),
titlePanel("Parameter Values"),
# Periods ---------------------------------
numericInput("BS_initparam_periods", "Periods", 200),
hr(),
# Selectors for Parameter Changes ---------------------------------
# TFP ---------------------------------
numericInput("BS_initval_B", "Initial Value of Technology", 5),
checkboxInput("BS_changeinparam_tfp", "Change in TFP?"),
conditionalPanel(
condition = "input.BS_changeinparam_tfp == true",
numericInput("BS_pc_tfp_period", "Period of Change in TFP", 10, min = 0, max = 50),
numericInput("BS_pc_tfp_newval", "New Value of TFP", 20)),
hr(),
# Alpha ---------------------------------
numericInput("BS_initparam_alpha", "Alpha", 0.3),
checkboxInput("BS_changeinparam_alpha", "Change in Alpha?"),
conditionalPanel(
condition = "input.BS_changeinparam_alpha == true",
numericInput("BS_pc_alpha_period", "Period of Change in Alpha", 10, min = 0, max = 50),
numericInput("BS_pc_alpha_newval", "New Value of Alpha", 0.5)),
hr(),
# Delta ---------------------------------
numericInput("BS_initparam_delta", "Delta", 0.1),
checkboxInput("BS_changeinparam_delta", "Change in Delta?"),
conditionalPanel(
condition = "input.BS_changeinparam_delta == true",
numericInput("BS_pc_delta_period", "Period of Change in Delta", 10, min = 0, max = 50),
numericInput("BS_pc_delta_newval", "New Value of Delta", 0.5)),
hr(),
# Savings Rate ---------------------------------
numericInput("BS_initparam_savings", "Savings Rate", 0.1),
checkboxInput("BS_changeinparam_savings", "Change in Savings Rate?"),
conditionalPanel(
condition = "input.BS_changeinparam_savings == true",
numericInput("BS_pc_savings_period", "Period of Change in Savings Rate", 10, min = 0, max = 50),
numericInput("BS_pc_savings_newval", "New Value of Savings Rate", 0.5)),
hr(),
# Population Growth ---------------------------------
numericInput("BS_initparam_popgrowth", "Population Growth", 0.1),
checkboxInput("BS_changeinparam_popgrowth", "Change in Population Growth?"),
conditionalPanel(
condition = "input.BS_changeinparam_popgrowth == true",
numericInput("BS_pc_popgrowth_period", "Period of Change in Population Growth", 10, min = 0, max = 50),
numericInput("BS_pc_popgrowth_newval", "New Value of Population Growth", 0.2)),
hr()
),
mainPanel(
# Model Equations  ---------------------------------
titlePanel("Model Equations"),
withMathJax(),
p('
$$
\\begin{aligned}
Y_t &= BK_t^\\alpha L_t^{1-\\alpha} \\\\
r_t &= \\alpha B \\left(\\frac{K_t}{L_t}\\right)^{\\alpha -1}\\\\
w_t &= (1-\\alpha) \\left(\\frac{K_t}{L_t}\\right)^\\alpha \\\\
S_t &= sY_t \\\\
K_{t+1}&= sY_t + (1-\\delta)K_t \\\\
L_{t+1}&=(1+n)L_t
\\end{aligned}
$$'),
# Visualisation  ---------------------------------
textOutput("test"),
titlePanel("Simulation"),
plotOutput("BS_Viz"),
# Model Simulation Data ---------------------------------
titlePanel("Simulation Data"),
dataTableOutput("BS_Data")
)
)
),
# General Solow Model ---------------------------------
tabPanel("General Solow Model", fluid = TRUE),
# Extended Solow Model (Small Open Economy) ---------------------------------
tabPanel("Extended Solow Model (Small Open Economy)", fluid = TRUE),
# Extended Solow Model (Human Capital) ---------------------------------
tabPanel("Extended Solow Model (Human Capital)", fluid = TRUE),
# Extended Solow Model (Scarce Resources) ---------------------------------
tabPanel("Extended Solow Model (Scarce Resources)", fluid = TRUE),
# Extended Solow Model (Productive Externalities) ---------------------------------
tabPanel("Extended Solow Model (Productive Externalities)", fluid = TRUE)
)
),
# Server =================================
server = function(input, output) {
# Simulation of Basic Solow Model ---------------------------------
# Presimsteps regarding parameter change ---------------------------------
testgrid <- reactive({
parameternames <- c("B", "alpha", "delta", "n", "s")
pfcl <- c(if(input$BS_changeinparam_tfp) input$BS_pc_tfp_period else NA,
if(input$BS_changeinparam_alpha) input$BS_pc_alpha_period else NA,
if(input$BS_changeinparam_delta) input$BS_pc_delta_period else NA,
if(input$BS_changeinparam_popgrowth) input$BS_pc_popgrowth_period else NA,
if(input$BS_changeinparam_savings) input$BS_pc_savings_period else NA)
initialparametervalues <- c(input$BS_initval_B,
input$BS_initparam_alpha,
input$BS_initparam_delta,
input$BS_initparam_popgrowth,
input$BS_initparam_savings
)
nvl <- c(if(input$BS_changeinparam_tfp) input$BS_pc_tfp_newval else NA,
if(input$BS_changeinparam_alpha) input$BS_pc_alpha_newval else NA,
if(input$BS_changeinparam_delta) input$BS_pc_delta_newval else NA,
if(input$BS_changeinparam_popgrowth) input$BS_pc_popgrowth_newval else NA,
if(input$BS_changeinparam_savings) input$BS_pc_savings_newval else NA)
create_parameter_grid(
parameternames,
initialparametervalues,
pfcl,
nvl,
input$BS_initparam_periods
)
})
BS_vtv_processed_encoded <- reactive({
case_when(
input$BS_vtv == "Capital Stock" ~ "K",
input$BS_vtv == "Labor Stock" ~ "L",
input$BS_vtv == "Wage Rate" ~ "WR",
input$BS_vtv == "Rental Rate" ~ "RR",
input$BS_vtv == "Output" ~ "Y",
input$BS_vtv == "Log of Output" ~ "logY",
input$BS_vtv == "Growth Rate of Output" ~ "gY",
input$BS_vtv == "Output per Worker" ~ "YpW",
input$BS_vtv == "Log of Output per Worker" ~ "logYpW",
input$BS_vtv == "Growth Rate of Output per Worker" ~ "gYpW",
input$BS_vtv == "Output per Effective Worker" ~ "YpEW",
input$BS_vtv == "Log of Output per Effective Worker" ~ "logYpEW",
input$BS_vtv == "Growth Rate of Output per Effective Worker" ~ "gYpEW"
)
})
BS_vtv_processed_sim <- reactive({
aux <- BS_vtv_processed_encoded()
aux_non_standard_detect <- aux %in% c("L", "K", "RR", "WR", "Y")
aux[!aux_non_standard_detect]
})
output$test <- renderText({BS_vtv_processed_sim()})
BS_aux_data <- reactive({
SimulateBasicSolowModel(testgrid(), input$BS_initparam_periods, BS_vtv_processed_sim(),
list(K = input$BS_initval_K, L = input$BS_initval_K))
})
output$BS_Data <- renderDataTable({BS_aux_data() %>% mutate_all(round, digits = 3)})
BS_vtv_processed_viz <- reactive({
BS_vtv_processed_encoded()
})
output$BS_Viz <- renderPlot({VisualiseSimulation(BS_aux_data(), BS_vtv_processed_viz(), input$scales_free_or_fixed)})
}
)
# Simulating the Economy =================================
meta_BS_variables <-
c(
"Capital Stock",
"Labor Stock",
"Wage Rate",
"Rental Rate",
"Output",
"Output per Worker",
"Output per Effective Worker",
"Log of Output",
"Log of Output per Worker",
"Log of Output per Effective Worker",
"Growth Rate of Output",
"Growth Rate of Output per Worker",
"Growth Rate of Output per Effective Worker"
)
SimulateBasicSolowModel <- function(paragrid, np, vts, startvals){
# paragrid for parameter grid;
# np for number of periods;
# vts for vars to simulate
# paragrid <- test
# Basic Model Functions ---------------------------------
BS_MF_KN <- function(s, Y, delta, K){s * Y + (1-delta)*K}
BS_MF_LN <- function(n, L){(1+n) * L}
BS_MF_RR <- function(B, K, L, alpha){alpha * B * (K/L)^(alpha - 1)}
BS_MF_WR <- function(B, K, L, alpha){(1-alpha) * B * (K/L)^alpha}
BS_MF_Y <- function(B, K, L, alpha){B * K^alpha * L^(1-alpha)}
# Initialize Simulation Table ---------------------------------
# vts <- c("YpW", "YpEW")
vts <- meta_BS_variables
sim_table <- create_simulation_table(vts, np)
# Fill in Start Values for Period 0 ---------------------------------
# startvals <- list(L = 1, K = 2)
aux_index <- which(sim_table$period == 0)
sim_table[[aux_index, "L"]] <- startvals$L
sim_table[[aux_index, "K"]] <- startvals$K
sim_table[[aux_index, "Y"]] <- BS_MF_Y(paragrid[["B"]][[which(paragrid$period == 0)]],
sim_table[["K"]][[which(sim_table$period == 0)]],
sim_table[["L"]][[which(sim_table$period == 0)]],
paragrid[["alpha"]][[which(paragrid$period == 0)]])
sim_table[[aux_index, "RR"]] <- BS_MF_RR(paragrid[["B"]][[which(paragrid$period == 0)]],
sim_table[["K"]][[which(sim_table$period == 0)]],
sim_table[["L"]][[which(sim_table$period == 0)]],
paragrid[["alpha"]][[which(paragrid$period == 0)]])
sim_table[[aux_index, "WR"]] <- BS_MF_WR(paragrid[["B"]][[which(paragrid$period == 0)]],
sim_table[["K"]][[which(sim_table$period == 0)]],
sim_table[["L"]][[which(sim_table$period == 0)]],
paragrid[["alpha"]][[which(paragrid$period == 0)]])
# Simulating Periods after Period 0 ---------------------------------
for (i in 1:np){
# i <- 1
# print(i)
aux_index <- which(sim_table$period == i)
sim_table[[aux_index, "L"]] <- BS_MF_LN(paragrid[["n"]][[which(paragrid$period == i-1)]],
sim_table[["L"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "K"]] <- BS_MF_KN(paragrid[["s"]][[which(paragrid$period == i-1)]],
sim_table[["Y"]][[which(sim_table$period == i-1)]],
paragrid[["delta"]][[which(paragrid$period == i-1)]],
sim_table[["K"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "Y"]] <- BS_MF_Y(paragrid[["B"]][[which(paragrid$period == i)]],
sim_table[["K"]][[which(sim_table$period == i)]],
sim_table[["L"]][[which(sim_table$period == i)]],
paragrid[["alpha"]][[which(paragrid$period == i)]])
sim_table[[aux_index, "RR"]] <- BS_MF_RR(paragrid[["B"]][[which(paragrid$period == i)]],
sim_table[["K"]][[which(sim_table$period == i)]],
sim_table[["L"]][[which(sim_table$period == i)]],
paragrid[["alpha"]][[which(paragrid$period == i)]])
sim_table[[aux_index, "WR"]] <- BS_MF_WR(paragrid[["B"]][[which(paragrid$period == i)]],
sim_table[["K"]][[which(sim_table$period == i)]],
sim_table[["L"]][[which(sim_table$period == i)]],
paragrid[["alpha"]][[which(paragrid$period == i)]])
}
# Computing Additional Variables ---------------------------------
remaining_vars_to_compute <- names(sim_table) %in% c("L", "K", "RR", "WR", "Y")
for(i in names(sim_table)[!remaining_vars_to_compute]){
print(i)
if(i == "YpW"){sim_table <- sim_table %>% mutate(YpW = Y/L)}
if(i == "YpEW"){sim_table <- sim_table %>% mutate(YpEW = Y/(paragrid[["B"]]*L))}
if(i == "logY"){sim_table <- sim_table %>% mutate(logY = log(Y))}
if(i == "logYpW"){sim_table <- sim_table %>% mutate(logYpW = log(YpW))}
if(i == "logYpEW"){sim_table <- sim_table %>% mutate(logYpEW = log(YpEW))}
if(i == "gY"){sim_table <- sim_table %>% mutate(gY = log(Y) - log(lag(Y)))}
if(i == "gYpW"){sim_table <- sim_table %>% mutate(gYpW = log(YpW) - log(lag(YpW)))}
if(i == "gYpEW"){sim_table <- sim_table %>% mutate(gYpEW= log(YpEW) - log(lag(YpEW)))}
}
return(sim_table)
}
VisualiseSimulation <- function(simulation_data, variables, scale_identifier){
# simulation_data <- testsimulation
# variables <- addvarstest
# scale_identifier <- "free"
variables <- c("period", variables)
simulation_data %>% select(variables) %>%
pivot_longer(-period, names_to = "Variable") %>%
mutate(Variable = as.factor(Variable)) %>%
ggplot(aes(period, value, col = Variable)) +
geom_line() +
facet_wrap(~Variable, scales = scale_identifier, ncol = 2)+
labs(x = "Period", y = "Value") +
theme(legend.position = "none")
}
## Testing
testnamel <- c("B", "alpha", "delta", "n", "s")
testivl <- c(2,1/3,0.1, 0.04, 0.23)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, 200)
addvarstest <- c("YpW", "YpEW", "gYpEW")
testsimulation <- SimulateBasicSolowModel(testgridalt, 200, addvarstest, list(K = 1, L = 1))
# View(testsimulation)
VisualiseSimulation(testsimulation, c("Y", "RR", "WR", addvarstest), "free")
testsimulation <- SimulateBasicSolowModel(testgridalt, 200, c(), list(K = 1, L = 1))
# View(testsimulation)
VisualiseSimulation(testsimulation, c("Y", "RR", "WR", addvarstest), "free")
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, 200)
testsimulation <- SimulateBasicSolowModel(testgridalt, 200, c(), list(K = 1, L = 1))
# View(testsimulation)
VisualiseSimulation(testsimulation, c("Y", "RR", "WR", addvarstest), "free")
testnamel <- c("B", "alpha", "delta", "n", "s")
testivl <- c(2,1/3,0.1, 0.04, 0.23)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, 200)
testsimulation <- SimulateBasicSolowModel(testgridalt, 200, c(), list(K = 1, L = 1))
# View(testsimulation)
VisualiseSimulation(testsimulation, c("Y", "RR", "WR", addvarstest), "free")
test
meta_BS_variables
meta_BS_variables
testsimulation
## Testing
testnamel <- c("B", "alpha", "delta", "n", "s")
testivl <- c(2,1/3,0.1, 0.04, 0.23)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, 200)
testgridalt
testsimulation <- SimulateBasicSolowModel(testgridalt, 200, c(), list(K = 1, L = 1))
testsimulation
aux <- as.double(rep(NA, length(c(3))))
aux
aux <- as.double(rep(NA, length(c(variables))))
variable_encoder(c("Output per Effective Worker"))
variable_encoder <- function(variables){
n_vars <- length(variables)
aux <- as.double(rep(NA, n_vars))
for(i in 1:n_vars){
aux2 <- variables[[i]]
aux3 <- case_when(
aux2 == "Capital Stock" ~ "K",
aux2 == "Labor Stock" ~ "L",
aux2 == "Wage Rate" ~ "WR",
aux2 == "Rental Rate" ~ "RR",
aux2 == "Output" ~ "Y",
aux2 == "Log of Output" ~ "logY",
aux2 == "Growth Rate of Output" ~ "gY",
aux2 == "Output per Worker" ~ "YpW",
aux2 == "Log of Output per Worker" ~ "logYpW",
aux2 == "Growth Rate of Output per Worker" ~ "gYpW",
aux2 == "Output per Effective Worker" ~ "YpEW",
aux2 == "Log of Output per Effective Worker" ~ "logYpEW",
aux2 == "Growth Rate of Output per Effective Worker" ~ "gYpEW"
)
}
return(aux)
}
variable_encoder(c("Output per Effective Worker"))
i <- 1
variables <- c("Output per Effective Worker")
# variables <- c("Output per Effective Worker")
n_vars <- length(variables)
n_vars
aux <- as.double(rep(NA, n_vars))
aux
i <- 1
aux2 <- variables[[i]]
aux2
aux3 <- case_when(
aux2 == "Capital Stock" ~ "K",
aux2 == "Labor Stock" ~ "L",
aux2 == "Wage Rate" ~ "WR",
aux2 == "Rental Rate" ~ "RR",
aux2 == "Output" ~ "Y",
aux2 == "Log of Output" ~ "logY",
aux2 == "Growth Rate of Output" ~ "gY",
aux2 == "Output per Worker" ~ "YpW",
aux2 == "Log of Output per Worker" ~ "logYpW",
aux2 == "Growth Rate of Output per Worker" ~ "gYpW",
aux2 == "Output per Effective Worker" ~ "YpEW",
aux2 == "Log of Output per Effective Worker" ~ "logYpEW",
aux2 == "Growth Rate of Output per Effective Worker" ~ "gYpEW"
)
aux3
variable_encoder <- function(variables){
# variables <- c("Output per Effective Worker")
n_vars <- length(variables)
aux <- as.double(rep(NA, n_vars))
for(i in 1:n_vars){
i <- 1
aux2 <- variables[[i]]
aux3 <- case_when(
aux2 == "Capital Stock" ~ "K",
aux2 == "Labor Stock" ~ "L",
aux2 == "Wage Rate" ~ "WR",
aux2 == "Rental Rate" ~ "RR",
aux2 == "Output" ~ "Y",
aux2 == "Log of Output" ~ "logY",
aux2 == "Growth Rate of Output" ~ "gY",
aux2 == "Output per Worker" ~ "YpW",
aux2 == "Log of Output per Worker" ~ "logYpW",
aux2 == "Growth Rate of Output per Worker" ~ "gYpW",
aux2 == "Output per Effective Worker" ~ "YpEW",
aux2 == "Log of Output per Effective Worker" ~ "logYpEW",
aux2 == "Growth Rate of Output per Effective Worker" ~ "gYpEW"
)
aux[[i]] <- aux3
}
return(aux)
}
variable_encoder(c("Output per Effective Worker"))
st <- Sys.time()
variable_encoder(c("Output per Effective Worker"))
et <- Sys.time()
et - st
st <- Sys.time()
variable_encoder(c("Output per Effective Worker"))
et <- Sys.time()
et - st
