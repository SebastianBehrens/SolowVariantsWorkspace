std <- sd(sample)
chebyshev_interval_prob_sample <- sample %>% between(mean-n_std_deviations, mean + n_std_deviations) %>% mean()
chebyshev_interval_prob <- 1 - (1/(n_std_deviations^2))
sprintf("Probabilities in the interval of [mean - %s sigma, mean + %s sigma]", n_std_deviations, n_std_deviations)
print("Theoretical:")
print(chebyshev_interval_prob)
print("Estimated:")
print(chebyshev_interval_prob_sample)
print("Estimated >= Theoretical")
print(ifelse(chebyshev_interval_prob_sample >= chebyshev_interval_prob, "True", "False"))
# sprintf("Estimated: %s", chebyshev_interval_prob)
}
chebyshevs_theorem_tester("pois", 2)
chebyshevs_theorem_tester("geom", 2)
doCall
library(R.utils)
chebyshevs_theorem_tester <- function(dist, n_std_deviations){
# possible dist <- norm, pois, exp, hyper, geom
sample_command <- paste("r", dist, sep = "")
sample <- doCall(sample_command, list(n = 50000, lambda = 10))
mean <- mean(sample)
std <- sd(sample)
chebyshev_interval_prob_sample <- sample %>% between(mean-n_std_deviations, mean + n_std_deviations) %>% mean()
chebyshev_interval_prob <- 1 - (1/(n_std_deviations^2))
sprintf("Probabilities in the interval of [mean - %s sigma, mean + %s sigma]", n_std_deviations, n_std_deviations)
print("Theoretical:")
print(chebyshev_interval_prob)
print("Estimated:")
print(chebyshev_interval_prob_sample)
print("Estimated >= Theoretical")
print(ifelse(chebyshev_interval_prob_sample >= chebyshev_interval_prob, "True", "False"))
# sprintf("Estimated: %s", chebyshev_interval_prob)
}
chebyshevs_theorem_tester("geom", 2)
chebyshevs_theorem_tester <- function(dist, n_std_deviations){
# possible dist <- norm, pois, exp, hyper, geom
sample_command <- paste("r", dist, sep = "")
sample <- doCall(sample_command, list(n = 50000, lambda = 10))
mean <- mean(sample)
std <- sd(sample)
chebyshev_interval_prob_sample <- sample %>% between(mean-n_std_deviations, mean + n_std_deviations) %>% mean()
chebyshev_interval_prob <- 1 - (1/(n_std_deviations^2))
sprintf("Probabilities in the interval of [mean - %s sigma, mean + %s sigma]", n_std_deviations, n_std_deviations)
print("Theoretical:")
print(chebyshev_interval_prob)
print("Estimated:")
print(chebyshev_interval_prob_sample)
print("Estimated >= Theoretical")
print(ifelse(chebyshev_interval_prob_sample >= chebyshev_interval_prob, "True", "False"))
# sprintf("Estimated: %s", chebyshev_interval_prob)
}
chebyshevs_theorem_tester("geom", 2)
chebyshevs_theorem_tester <- function(dist, n_std_deviations){
# possible dist <- norm, pois, exp, hyper, geom
sample_command <- paste("r", dist, sep = "")
sample <- doCall(sample_command, list(n = 50000, lambda = 10, prob = 0.3))
mean <- mean(sample)
std <- sd(sample)
chebyshev_interval_prob_sample <- sample %>% between(mean-n_std_deviations, mean + n_std_deviations) %>% mean()
chebyshev_interval_prob <- 1 - (1/(n_std_deviations^2))
sprintf("Probabilities in the interval of [mean - %s sigma, mean + %s sigma]", n_std_deviations, n_std_deviations)
print("Theoretical:")
print(chebyshev_interval_prob)
print("Estimated:")
print(chebyshev_interval_prob_sample)
print("Estimated >= Theoretical")
print(ifelse(chebyshev_interval_prob_sample >= chebyshev_interval_prob, "True", "False"))
# sprintf("Estimated: %s", chebyshev_interval_prob)
}
chebyshevs_theorem_tester("geom", 2)
library(R.utils)
chebyshevs_theorem_tester <- function(dist, n_std_deviations){
# possible dist <- norm, pois, exp, hyper, geom
sample_command <- paste("r", dist, sep = "")
sample <- doCall(sample_command, list(n = 50000, lambda = 10, prob = 0.3))
mean <- mean(sample)
std <- sd(sample)
chebyshev_interval_prob_sample <- sample %>% between(mean-n_std_deviations, mean + n_std_deviations) %>% mean()
chebyshev_interval_prob <- 1 - (1/(n_std_deviations^2))
sprintf("Probabilities in the interval of [mean - %s sigma, mean + %s sigma]", n_std_deviations, n_std_deviations)
print("Theoretical:")
print(chebyshev_interval_prob)
print("Estimated:")
print(chebyshev_interval_prob_sample)
print("Estimated >= Theoretical")
print(ifelse(chebyshev_interval_prob_sample >= chebyshev_interval_prob, "True", "False"))
# sprintf("Estimated: %s", chebyshev_interval_prob)
}
chebyshevs_theorem_tester("norm", 2)
chebyshevs_theorem_tester("norm", 2)
chebyshevs_theorem_tester <- function(dist, n_std_deviations){
# possible dist <- norm, pois, exp, hyper, geom
sample_command <- paste("r", dist, sep = "")
sample <- doCall(sample_command, list(n = 50000, lambda = 10))
mean <- mean(sample)
std <- sd(sample)
chebyshev_interval_prob_sample <- sample %>% between(mean-n_std_deviations, mean + n_std_deviations) %>% mean()
chebyshev_interval_prob <- 1 - (1/(n_std_deviations^2))
sprintf("Probabilities in the interval of [mean - %s sigma, mean + %s sigma]", n_std_deviations, n_std_deviations)
print("Theoretical:")
print(chebyshev_interval_prob)
print("Estimated:")
print(chebyshev_interval_prob_sample)
print("Estimated >= Theoretical")
print(ifelse(chebyshev_interval_prob_sample >= chebyshev_interval_prob, "True", "False"))
# sprintf("Estimated: %s", chebyshev_interval_prob)
}
chebyshevs_theorem_tester("norm", 2)
chebyshevs_theorem_tester <- function(dist, n_std_deviations){
# possible dist <- norm, pois, exp, hyper, geom
sample_command <- paste("r", dist, sep = "")
sample <- doCall(sample_command, list(n = 50000))
mean <- mean(sample)
std <- sd(sample)
chebyshev_interval_prob_sample <- sample %>% between(mean-n_std_deviations, mean + n_std_deviations) %>% mean()
chebyshev_interval_prob <- 1 - (1/(n_std_deviations^2))
sprintf("Probabilities in the interval of [mean - %s sigma, mean + %s sigma]", n_std_deviations, n_std_deviations)
print("Theoretical:")
print(chebyshev_interval_prob)
print("Estimated:")
print(chebyshev_interval_prob_sample)
print("Estimated >= Theoretical")
print(ifelse(chebyshev_interval_prob_sample >= chebyshev_interval_prob, "True", "False"))
# sprintf("Estimated: %s", chebyshev_interval_prob)
}
chebyshevs_theorem_tester("norm", 2)
rpois(500, 3)
chebyshevs_theorem_tester <- function(dist, n_std_deviations){
# possible dist <- norm, pois, exp, hyper, geom
sample_command <- paste("r", dist, sep = "")
sample <- doCall(sample_command, list(n = 50000, lambda = 10))
mean <- mean(sample)
std <- sd(sample)
chebyshev_interval_prob_sample <- sample %>% between(mean-n_std_deviations, mean + n_std_deviations) %>% mean()
chebyshev_interval_prob <- 1 - (1/(n_std_deviations^2))
sprintf("Probabilities in the interval of [mean - %s sigma, mean + %s sigma]", n_std_deviations, n_std_deviations)
print("Theoretical:")
print(chebyshev_interval_prob)
print("Estimated:")
print(chebyshev_interval_prob_sample)
print("Estimated >= Theoretical")
print(ifelse(chebyshev_interval_prob_sample >= chebyshev_interval_prob, "True", "False"))
# sprintf("Estimated: %s", chebyshev_interval_prob)
}
chebyshevs_theorem_tester("pois", 2)
chebyshevs_theorem_tester <- function(dist, n_std_deviations){
# possible dist <- norm, pois, exp, hyper, geom
sample_command <- paste("r", dist, sep = "")
sample_command_inputs <- list(n = 50000, lambda = 10)
sample <- doCall(sample_command, sample_command_inputs)
mean <- mean(sample)
std <- sd(sample)
chebyshev_interval_prob_sample <- sample %>% between(mean-n_std_deviations, mean + n_std_deviations) %>% mean()
chebyshev_interval_prob <- 1 - (1/(n_std_deviations^2))
sprintf("Probabilities in the interval of [mean - %s sigma, mean + %s sigma]", n_std_deviations, n_std_deviations)
print("Theoretical:")
print(chebyshev_interval_prob)
print("Estimated:")
print(chebyshev_interval_prob_sample)
print("Estimated >= Theoretical")
print(ifelse(chebyshev_interval_prob_sample >= chebyshev_interval_prob, "True", "False"))
# sprintf("Estimated: %s", chebyshev_interval_prob)
}
chebyshevs_theorem_tester("pois", 2)
## Setup =================================
# Clean Start ---------------------------------
rm(list = ls())
# Set Path
setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants")
# getwd()
# Essential Sourcing Function ---------------------------------
getShinyPart <- function(kind, which) {
# kind for "server" or "tab"
# which for the abbreviation of the respective part
if (kind %in% c("S", "T")) {} else {
stop("The entered value for 'kind' in getShinyPart() is not defined.")
}
path_to_source <- paste0(ifelse(kind == "T", "Tabs", "ServerParts"), "/", which, ifelse(kind == "T", "Tab.R", "Server.R"))
if (kind == "T") {
source(path_to_source)
return(get(paste0(which, "Tab")))
} else if (kind == "S") {
source(path_to_source, local = TRUE)
}
}
# Loading Libraries ---------------------------------
# temporarily abandoned package managing function
# detach_package <- function(pkg, character.only = FALSE)
# {
#   if(!character.only)
#   {
#     pkg <- deparse(substitute(pkg))
#   }
#   search_item <- paste("package", pkg, sep = ":")
#   while(search_item %in% search())
#   {
#     detach(search_item, unload = TRUE, character.only = TRUE)
#   }
# }
# detach_package("broom", TRUE)
# broom::augment()
# package_organiser("broom")
# package_organiser <- function(string){
#   if(!require(string, character.only = TRUE)){
#   install.packages(string)
#   library(string, character.only = TRUE)
# }else{
#   library(string, character.only = TRUE)
# }
# }
# #
library(tidyverse)
library(shiny)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
library(tidyverse)
library(modelr)
library(ggplot2)
library(stargazer)
library(R.utils)
library(reactlog)
reactlog_enable()
# ggplot2 Setup ---------------------------------
theme_set(
theme_classic() +
theme(
axis.ticks.length = unit(-0.25, "cm"),
axis.text.x = element_text(margin = unit(c(0.4, 0, 0, 0), "cm")),
axis.text.y = element_text(margin = unit(c(0, 0.4, 0, 0), "cm")),
axis.line = element_blank(),
panel.grid.major.y = element_line(linetype = 2),
plot.title = element_text(hjust = 0.5),
text = element_text(family = "serif"),
legend.justification = c("right", "top"),
# legend.position = c(1, 1),
legend.position = c(.98, .98),
legend.background = element_rect(fill = NA, color = "black"),
panel.border = element_rect(fill = NA, size = 1.25),
strip.text = element_text(size = 12)
# legend.margin = margin(6, 10, 6, 6)
# legend.box.background = element_rect(colour = "black")
)
)
# Sourcing Simulation Functions and Helper Functions =================================
source("HelperFunctions.R")
source("SimulationFunctions/BS.R")
source("SimulationFunctions/GS.R")
source("SimulationFunctions/ESSOE.R")
source("SimulationFunctions/ESHC.R")
source("SimulationFunctions/ESSRO.R")
source("SimulationFunctions/ESSRL.R")
source("CompareModels.R")
shinyApp(
ui = fluidPage(
theme = shinytheme("cerulean"),
titlePanel("Growth Models in Macroeconomic Theory"),
# Loading Tabs ---------------------------------
tabsetPanel(
getShinyPart("T", "StartPage"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
# getShinyPart("T", "ESSRL"),
# getShinyPart("T", "ESSROL"),
getShinyPart("T", "Comparison")
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
session$onSessionEnded(stopApp)
}
)
# Set Path
setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants")
## Setup =================================
# Clean Start ---------------------------------
rm(list = ls())
# Set Path
setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants")
# Essential Sourcing Function ---------------------------------
getShinyPart <- function(kind, which) {
# kind for "server" or "tab"
# which for the abbreviation of the respective part
if (kind %in% c("S", "T")) {} else {
stop("The entered value for 'kind' in getShinyPart() is not defined.")
}
path_to_source <- paste0(ifelse(kind == "T", "Tabs", "ServerParts"), "/", which, ifelse(kind == "T", "Tab.R", "Server.R"))
if (kind == "T") {
source(path_to_source)
return(get(paste0(which, "Tab")))
} else if (kind == "S") {
source(path_to_source, local = TRUE)
}
}
library(tidyverse)
library(shiny)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
library(tidyverse)
library(modelr)
library(ggplot2)
library(stargazer)
library(R.utils)
library(reactlog)
reactlog_enable()
theme_set(
theme_classic() +
theme(
axis.ticks.length = unit(-0.25, "cm"),
axis.text.x = element_text(margin = unit(c(0.4, 0, 0, 0), "cm")),
axis.text.y = element_text(margin = unit(c(0, 0.4, 0, 0), "cm")),
axis.line = element_blank(),
panel.grid.major.y = element_line(linetype = 2),
plot.title = element_text(hjust = 0.5),
text = element_text(family = "serif"),
legend.justification = c("right", "top"),
# legend.position = c(1, 1),
legend.position = c(.98, .98),
legend.background = element_rect(fill = NA, color = "black"),
panel.border = element_rect(fill = NA, size = 1.25),
strip.text = element_text(size = 12)
# legend.margin = margin(6, 10, 6, 6)
# legend.box.background = element_rect(colour = "black")
)
)
source("HelperFunctions.R")
source("SimulationFunctions/BS.R")
source("SimulationFunctions/GS.R")
source("SimulationFunctions/ESSOE.R")
source("SimulationFunctions/ESHC.R")
source("SimulationFunctions/ESSRO.R")
source("SimulationFunctions/ESSRL.R")
source("CompareModels.R")
shinyApp(
ui = fluidPage(
theme = shinytheme("cerulean"),
titlePanel("Growth Models in Macroeconomic Theory"),
# Loading Tabs ---------------------------------
tabsetPanel(
getShinyPart("T", "StartPage"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
# getShinyPart("T", "ESSRL"),
# getShinyPart("T", "ESSROL"),
getShinyPart("T", "Comparison")
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
session$onSessionEnded(stopApp)
}
)
# Essential Sourcing Function ---------------------------------
getShinyPart <- function(kind, which) {
# kind for "server" or "tab"
# which for the abbreviation of the respective part
if (kind %in% c("S", "T")) {} else {
stop("The entered value for 'kind' in getShinyPart() is not defined.")
}
path_to_source <- paste0(ifelse(kind == "T", "Tabs", "ServerParts"), "/", which, ifelse(kind == "T", "Tab.R", "Server.R"))
if (kind == "T") {
source(path_to_source)
return(get(paste0(which, "Tab")))
} else if (kind == "S") {
source(path_to_source, local = TRUE)
}
}
## Setup =================================
# Clean Start ---------------------------------
rm(list = ls())
# Set Path
setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants")
# getwd()
# Essential Sourcing Function ---------------------------------
getShinyPart <- function(kind, which) {
# kind for "server" or "tab"
# which for the abbreviation of the respective part
if (kind %in% c("S", "T")) {} else {
stop("The entered value for 'kind' in getShinyPart() is not defined.")
}
path_to_source <- paste0(ifelse(kind == "T", "Tabs", "ServerParts"), "/", which, ifelse(kind == "T", "Tab.R", "Server.R"))
if (kind == "T") {
source(path_to_source)
return(get(paste0(which, "Tab")))
} else if (kind == "S") {
source(path_to_source, local = TRUE)
}
}
# Loading Libraries ---------------------------------
# temporarily abandoned package managing function
# detach_package <- function(pkg, character.only = FALSE)
# {
#   if(!character.only)
#   {
#     pkg <- deparse(substitute(pkg))
#   }
#   search_item <- paste("package", pkg, sep = ":")
#   while(search_item %in% search())
#   {
#     detach(search_item, unload = TRUE, character.only = TRUE)
#   }
# }
# detach_package("broom", TRUE)
# broom::augment()
# package_organiser("broom")
# package_organiser <- function(string){
#   if(!require(string, character.only = TRUE)){
#   install.packages(string)
#   library(string, character.only = TRUE)
# }else{
#   library(string, character.only = TRUE)
# }
# }
# #
library(tidyverse)
library(shiny)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
library(tidyverse)
library(modelr)
library(ggplot2)
library(stargazer)
library(R.utils)
library(reactlog)
reactlog_enable()
# ggplot2 Setup ---------------------------------
theme_set(
theme_classic() +
theme(
axis.ticks.length = unit(-0.25, "cm"),
axis.text.x = element_text(margin = unit(c(0.4, 0, 0, 0), "cm")),
axis.text.y = element_text(margin = unit(c(0, 0.4, 0, 0), "cm")),
axis.line = element_blank(),
panel.grid.major.y = element_line(linetype = 2),
plot.title = element_text(hjust = 0.5),
text = element_text(family = "serif"),
legend.justification = c("right", "top"),
# legend.position = c(1, 1),
legend.position = c(.98, .98),
legend.background = element_rect(fill = NA, color = "black"),
panel.border = element_rect(fill = NA, size = 1.25),
strip.text = element_text(size = 12)
# legend.margin = margin(6, 10, 6, 6)
# legend.box.background = element_rect(colour = "black")
)
)
# Sourcing Simulation Functions and Helper Functions =================================
source("HelperFunctions.R")
source("SimulationFunctions/BS.R")
source("SimulationFunctions/GS.R")
source("SimulationFunctions/ESSOE.R")
source("SimulationFunctions/ESHC.R")
source("SimulationFunctions/ESSRO.R")
source("SimulationFunctions/ESSRL.R")
source("CompareModels.R")
shinyApp(
ui = fluidPage(
theme = shinytheme("cerulean"),
titlePanel("Growth Models in Macroeconomic Theory"),
# Loading Tabs ---------------------------------
tabsetPanel(
getShinyPart("T", "StartPage"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
# getShinyPart("T", "ESSRL"),
# getShinyPart("T", "ESSROL"),
getShinyPart("T", "Comparison")
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
session$onSessionEnded(stopApp)
}
)
