as.tibble() %>%
mutate(second_gold_given_first_gold = ifelse(X2 == "G", 1, 0)) %>%
filter(X1 == "G") %>%
summarise(prob_second_gold = mean(second_gold_given_first_gold)) %>%
pull(prob_second_gold)
)
hist(replications)
?hist
hist(replications, breaks = 50)
replications
tibble(a = replications) %>% ggplot(aes(a)) + geom_histogram(col = "blue")
tibble(a = replications) %>% ggplot(aes(a)) + geom_histogram(fill = "blue")
theme_set(
theme_classic() +
theme(
axis.ticks.length = unit(-0.25, "cm"),
axis.text.x = element_text(margin = unit(c(0.4,0,0,0), "cm")),
axis.text.y = element_text(margin = unit(c(0,0.4,0,0), "cm")),
axis.line = element_blank(),
panel.grid.major.y = element_line(linetype = 2),
plot.title = element_text(hjust = 0.5),
text = element_text(family = "serif"),
legend.justification = c("right", "top"),
# legend.position = c(1, 1),
legend.position = c(.98, .98),
legend.background = element_rect(fill = NA, color = "black"),
panel.border = element_rect(fill = NA, size = 1.25),
strip.text = element_text(size = 12)
# legend.margin = margin(6, 10, 6, 6)
# legend.box.background = element_rect(colour = "black")
)
)
tibble(a = replications) %>% ggplot(aes(a)) + geom_histogram(fill = "blue")
tibble(a = replications) %>% ggplot(aes(a)) + geom_histogram(fill = "blue", binwidth = 0.05)
tibble(a = replications) %>% ggplot(aes(a)) + geom_histogram(fill = "blue", binwidth = 0.0005)
tibble(a = replications) %>% ggplot(aes(a)) + geom_histogram(fill = "blue", binwidth = 0.005)
tibble(a = replications) %>% ggplot(aes(a)) + geom_histogram(fill = "pink", binwidth = 0.005)
tibble(a = replications) %>% ggplot(aes(a)) + geom_histogram(fill = "pink", binwidth = 0.005, alpha = 0.3)
tibble(a = replications) %>% ggplot(aes(a)) + geom_histogram(fill = "pink", binwidth = 0.005, alpha = 0.3) + labs(title = "pipi")
styler:::style_active_file()
tibble(a = replications) %>% ggplot(aes(a)) +
geom_histogram(fill = "pink", binwidth = 0.005, alpha = 0.3) +
labs(title = "pipi", y = "notcount", x = "nota")
tibble(a = replications) %>% ggplot(aes(a)) +
geom_histogram(fill = "pink", binwidth = 0.005, alpha = 0.3) +
labs(title = "pipi", y = "notcount", x = "notpipi")
tibble(a = replications) %>% ggplot(aes(a)) +
geom_histogram(fill = "pink", binwidth = 0.005, alpha = 0.3) +
labs(title = "pipi", y = "bobs", x = "notpipi")
tibble(a = replications) %>% ggplot(aes(a)) +
geom_histogram(fill = "pink", binwidth = 0.005, alpha = 0.3) +
labs(title = "pipi", y = "bobs", x = "notpipi", caption = "hihi joke")
tibble(a = replications) %>% mutate(col = ifelse(a >= 2/3) %>% ggplot(aes(a, group = col)) +
tibble(a = replications) %>% mutate(col = ifelse(a >= 2/3, 1, 0)) %>% ggplot(aes(a, group = col)) +
geom_histogram(fill = "pink", binwidth = 0.005, alpha = 0.3)
tibble(a = replications) %>% mutate(col = ifelse(a >= 2/3, 1, 0))
tibble(a = replications) %>% mutate(col = ifelse(a >= 2/3, 1, 0))
tibble(a = replications) %>% mutate(col = ifelse(a >= 2/3, 1, 0)) %>% ggplot(aes(a, group = col))
tibble(a = replications) %>% mutate(col = ifelse(a >= 2/3, 1, 0)) %>% ggplot(aes(a, group = col)) +
geom_histogram(fill = "pink", binwidth = 0.005, alpha = 0.3)
tibble(a = replications) %>% mutate(col = ifelse(a >= 2/3, 1, 0)) %>% ggplot(aes(a, fill = col)) +
geom_histogram(binwidth = 0.005, alpha = 0.3)
tibble(a = replications) %>% mutate(col = ifelse(a >= 2/3, 1, ifelse(a == 2/3, 2, 3))) %>% ggplot(aes(a, fill = col)) +
geom_histogram(binwidth = 0.005, alpha = 0.3)
tibble(a = replications) %>% mutate(col = ifelse(a >= 2/3, 1, ifelse(a == 2/3, 2, 3))) %>% ggplot(aes(a, col = col)) +
geom_histogram(binwidth = 0.005, alpha = 0.3)
tibble(a = replications) %>% mutate(col = ifelse(a >= 2/3, 1, ifelse(a == 2/3, 2, 3)))
tibble(a = replications) %>% mutate(col = ifelse(a >= 2/3, 1, ifelse(a == 2/3, 2, 3))) %>% filter(col == 2)
a
tibble(a = replications)  %>% ggplot(aes(a, col = col)) +
geom_histogram(binwidth = 0.005, alpha = 0.3)
tibble(a = replications)  %>% ggplot(aes(a)) +
geom_histogram(binwidth = 0.005, alpha = 0.3)
tibble(a = replications)  %>% ggplot(aes(a)) +
geom_histogram(binwidth = 0.005, alpha = 0.8)
tibble(a = replications)  %>% ggplot(aes(a)) +
geom_histogram(binwidth = 0.005, alpha = 0.8) + geom_vline(xintercept = 2/3)
tibble(a = replications)  %>% ggplot(aes(a)) +
geom_histogram(col = "blue", binwidth = 0.005, alpha = 0.8) + geom_vline(xintercept = 2/3)
tibble(a = replications)  %>% ggplot(aes(a)) +
geom_histogram(fill = "blue", binwidth = 0.005, alpha = 0.8) + geom_vline(xintercept = 2/3)
tibble(a = replications)  %>% ggplot(aes(a)) +
geom_histogram(fill = "blue", col = "orange", binwidth = 0.005, alpha = 0.8) + geom_vline(xintercept = 2/3)
tibble(a = replications)  %>% ggplot(aes(a)) +
geom_histogram(binwidth = 0.005, alpha = 0.8) + geom_vline(xintercept = 2/3)
tibble(a = replications)  %>% ggplot(aes(a)) +
geom_histogram(col = "pink", binwidth = 0.005, alpha = 0.8) + geom_vline(xintercept = 2/3)
tibble(a = replications)  %>% ggplot(aes(a)) +
geom_histogram(col = "pink", binwidth = 0.005, alpha = 0.99) + geom_vline(xintercept = 2/3)
tibble(a = replications)  %>% ggplot(aes(a)) +
geom_histogram(col = "pink", binwidth = 0.0001, alpha = 0.99) + geom_vline(xintercept = 2/3)
replications <- replicate(
10000,
replicate(25,
simulate_three_boxes(),
simplify = T
) %>%
t() %>%
data.frame() %>%
as.tibble() %>%
mutate(second_gold_given_first_gold = ifelse(X2 == "G", 1, 0)) %>%
filter(X1 == "G") %>%
summarise(prob_second_gold = mean(second_gold_given_first_gold)) %>%
pull(prob_second_gold)
)
tibble(a = replications)  %>% ggplot(aes(a)) +
geom_histogram(col = "pink", binwidth = 0.005, alpha = 0.99) + geom_vline(xintercept = 2/3)
replicate(5000, sample(6, 2) %>% mean(), simplify = T)
replicate(5000, sample(6, 2) %>% mean(), simplify = T) %>% histogram()
replicate(5000, sample(6, 2) %>% mean(), simplify = T) %>% hist()
replicate(5000, sample(6, 2, replace = T) %>% mean(), simplify = T) %>% hist()
replicate(5000, sample(6, 2, replace = T) %>% mean(), simplify = T) %>% hist()
replicate(5000, sample(6, 2, replace = T) %>% mean(), simplify = T) %>% hist()
replicate(5000, sample(6, 50, replace = T) %>% mean(), simplify = T) %>% hist()
sample(6, 60000) %>% cummean()
sample(6, 60000, replace = T) %>% cummean()
aux <- sample(6, 60000, replace = T) %>% cummean()
tibble(a = 1:length(aux), b = aux) %>% geom_line(aes(a, b)) + geom_line()
tibble(a = 1:length(aux), b = aux) %>% ggplot(aes(a, b)) + geom_line()
aux <- sample(6, 600000, replace = T) %>% cummean()
tibble(a = 1:length(aux), b = aux) %>% ggplot(aes(a, b)) + geom_line()
# Meta-Information All Variables =================================
meta_ESSOE_variables <-
c(
"Capital Stock",
"Labor Stock",
"Output",
"Capital Stock per Worker",
"Output per Worker",
"Capital Stock per Effective Worker",
"Output per Effective Worker",
"Wage Rate",
"Rental Rate",
"National Output",
"National Wealth",
"Net Foreign Assets",
"National Savings",
"Log of Output",
"Log of Output per Worker",
"Log of Output per Effective Worker",
"Log of Capital Stock",
"Log of Capital Stock per Worker",
"Log of Capital Stock per Effective Worker",
"Growth Rate of Output",
"Growth Rate of Output per Worker",
"Growth Rate of Output per Effective Worker",
"Growth Rate of Capital Stock",
"Growth Rate of Capital Stock per Worker",
"Growth Rate of Capital Stock per Effective Worker"
)
# 1.1 Simulate the Basic Solow Model =================================
SimulateExtendedSolowModelSmallOpenEconomy <- function(paragrid, np, startvals){
# Inputs ---------------------------------
# paragrid for parameter grid;
# np for number of periods;
# Load Basic Model Functions ---------------------------------
source("ESSOEModelFunctions.R")
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_ESSOE_variables), np)
# Fill Start Values for Period 0 ---------------------------------
aux_index <- which(sim_table$period == 0)
sim_table[[aux_index, "L"]] <- startvals$L
sim_table[[aux_index, "K"]] <- ESSOE_MF_K(paragrid[[aux_index, "r"]],
paragrid[[aux_index, "alpha"]],
paragrid[[aux_index, "B"]],
sim_table[[aux_index, "L"]])
sim_table[[aux_index, "V"]] <- startvals$V
sim_table[[aux_index, "F"]] <- ESSOE_MF_F(sim_table[[aux_index, "V"]],
sim_table[[aux_index, "K"]])
sim_table[[aux_index, "Y"]] <- ESSOE_MF_Y(paragrid[[aux_index, "B"]],
sim_table[[aux_index, "K"]],
sim_table[[aux_index, "L"]],
paragrid[["alpha"]][[which(paragrid$period == 0)]])
sim_table[[aux_index, "Yn"]] <- ESSOE_MF_Yn(sim_table[[aux_index, "Y"]],
paragrid[[aux_index, "r"]],
sim_table[[aux_index, "F"]])
# Computing Variables after Period 0 ---------------------------------
for (i in 1:np){
# i <- 1
aux_index <- which(sim_table$period == i)
# VN for V next since in period 0 only the initial values are computed. every iteration
#                starts with computing the start values of V (the path defining variable)
sim_table[[aux_index, "V"]] <- ESSOE_MF_VN(sim_table[[aux_index - 1, "Yn"]],
paragrid[[aux_index - 1, "s"]],
sim_table[[aux_index - 1, "V"]])
sim_table[[aux_index, "L"]] <- ESSOE_MF_LN(paragrid[[aux_index - 1, "n"]],
sim_table[[aux_index - 1, "L"]])
sim_table[[aux_index, "K"]] <- ESSOE_MF_K(paragrid[[aux_index, "r"]],
paragrid[[aux_index, "alpha"]],
paragrid[[aux_index, "B"]],
sim_table[[aux_index, "L"]])
sim_table[[aux_index, "F"]] <- ESSOE_MF_F(sim_table[[aux_index, "V"]],
sim_table[[aux_index, "K"]])
sim_table[[aux_index, "Y"]] <- ESSOE_MF_Y(paragrid[[aux_index, "B"]],
sim_table[[aux_index, "K"]],
sim_table[[aux_index, "L"]],
paragrid[[aux_index, "alpha"]])
# View(sim_table)
sim_table[[aux_index, "Yn"]] <- ESSOE_MF_Yn(sim_table[[aux_index, "Y"]],
paragrid[[aux_index, "r"]],
sim_table[[aux_index, "F"]])
}
# Computing Additional Variables ---------------------------------
remaining_vars_to_compute_bool <- names(sim_table) %in% c("period", "L", "K", "Y", "V", "F", "Yn")
sim_table <- add_var_computer(sim_table, remaining_vars_to_compute_bool, paragrid, "exo", "ESSOE")
# View(sim_table)
return(sim_table)
}
# Set Path
setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants")
# Meta-Information All Variables =================================
meta_ESSOE_variables <-
c(
"Capital Stock",
"Labor Stock",
"Output",
"Capital Stock per Worker",
"Output per Worker",
"Capital Stock per Effective Worker",
"Output per Effective Worker",
"Wage Rate",
"Rental Rate",
"National Output",
"National Wealth",
"Net Foreign Assets",
"National Savings",
"Log of Output",
"Log of Output per Worker",
"Log of Output per Effective Worker",
"Log of Capital Stock",
"Log of Capital Stock per Worker",
"Log of Capital Stock per Effective Worker",
"Growth Rate of Output",
"Growth Rate of Output per Worker",
"Growth Rate of Output per Effective Worker",
"Growth Rate of Capital Stock",
"Growth Rate of Capital Stock per Worker",
"Growth Rate of Capital Stock per Effective Worker"
)
# Load Basic Model Functions ---------------------------------
source("ESHCModelFunctions.R")
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_ESSOE_variables), np)
source("HelperFunctions.R")
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_ESSOE_variables), np)
library(tidyverse)
library(tidyverse)
library(shiny)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
library(tidyverse)
library(modelr)
library(ggplot2)
library(stargazer)
library(R.utils)
theme_set(
theme_classic() +
theme(
axis.ticks.length = unit(-0.25, "cm"),
axis.text.x = element_text(margin = unit(c(0.4,0,0,0), "cm")),
axis.text.y = element_text(margin = unit(c(0,0.4,0,0), "cm")),
axis.line = element_blank(),
panel.grid.major.y = element_line(linetype = 2),
plot.title = element_text(hjust = 0.5),
text = element_text(family = "serif"),
legend.justification = c("right", "top"),
# legend.position = c(1, 1),
legend.position = c(.98, .98),
legend.background = element_rect(fill = NA, color = "black"),
panel.border = element_rect(fill = NA, size = 1.25),
strip.text = element_text(size = 12)
# legend.margin = margin(6, 10, 6, 6)
# legend.box.background = element_rect(colour = "black")
)
)
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_ESSOE_variables), np)
# Testing
testnamel <- c("B", "alpha", "n", "s", "r")
testivl <- c(1, 1/3,0.1, 0.2, 0.05)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
meta_ESSOE_variables
# Meta-Information All Variables =================================
meta_BS_variables <-
c(
"Capital Stock",
"Labor Stock",
"Output",
"Capital Stock per Worker",
"Output per Worker",
"Output per Effective Worker",
"Capital Stock per Effective Worker",
"Wage Rate",
"Rental Rate",
"Log of Capital Stock",
"Log of Capital Stock per Worker",
"Log of Capital Stock per Effective Worker",
"Log of Output",
"Log of Output per Worker",
"Log of Output per Effective Worker",
"Growth Rate of Output",
"Growth Rate of Output per Worker",
"Growth Rate of Output per Effective Worker",
"Growth Rate of Capital Stock",
"Growth Rate of Capital Stock per Worker",
"Growth Rate of Capital Stock per Effective Worker"
)
# Meta-Information All Variables =================================
meta_BS_variables <-
c(
"Capital Stock",
"Labor Stock",
"Output",
"Capital Stock per Worker",
"Output per Worker",
"Output per Effective Worker",
"Capital Stock per Effective Worker",
"Wage Rate",
"Rental Rate",
"Log of Capital Stock",
"Log of Capital Stock per Worker",
"Log of Capital Stock per Effective Worker",
"Log of Output",
"Log of Output per Worker",
"Log of Output per Effective Worker",
"Growth Rate of Output",
"Growth Rate of Output per Worker",
"Growth Rate of Output per Effective Worker",
"Growth Rate of Capital Stock",
"Growth Rate of Capital Stock per Worker",
"Growth Rate of Capital Stock per Effective Worker"
)
# 1.1 Simulate the Basic Solow Model =================================
SimulateBasicSolowModel <- function(paragrid, np, startvals){
# Inputs ---------------------------------
# paragrid for parameter grid;
# np for number of periods;
# vts for vars to simulat
# Load Basic Model Functions ---------------------------------
source("BSModelFunctions.R")
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_BS_variables), np)
# Fill Start Values for Period 0 ---------------------------------
aux_index <- which(sim_table$period == 0)
sim_table[[aux_index, "L"]] <- startvals$L
sim_table[[aux_index, "K"]] <- startvals$K
sim_table[[aux_index, "Y"]] <- BS_MF_Y(paragrid[["B"]][[which(paragrid$period == 0)]],
sim_table[["K"]][[which(sim_table$period == 0)]],
sim_table[["L"]][[which(sim_table$period == 0)]],
paragrid[["alpha"]][[which(paragrid$period == 0)]])
# Computing Variables after Period 0 ---------------------------------
for (i in 1:np){
# i <- 1
# print(i)
aux_index <- which(sim_table$period == i)
sim_table[[aux_index, "L"]] <- BS_MF_LN(paragrid[["n"]][[which(paragrid$period == i-1)]],
sim_table[["L"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "K"]] <- BS_MF_KN(paragrid[["s"]][[which(paragrid$period == i-1)]],
sim_table[["Y"]][[which(sim_table$period == i-1)]],
paragrid[["delta"]][[which(paragrid$period == i-1)]],
sim_table[["K"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "Y"]] <- BS_MF_Y(paragrid[["B"]][[which(paragrid$period == i)]],
sim_table[["K"]][[which(sim_table$period == i)]],
sim_table[["L"]][[which(sim_table$period == i)]],
paragrid[["alpha"]][[which(paragrid$period == i)]])
}
# Computing Additional Variables ---------------------------------
remaining_vars_to_compute_bool <- names(sim_table) %in% c("period", "L", "K", "Y")
sim_table <- add_var_computer(sim_table, remaining_vars_to_compute_bool, paragrid, "exo", "BS")
return(sim_table)
}
testnamel <- c("B", "alpha", "delta", "n", "s")
testivl <- c(1, 1/3,0.1, 0.04, 0.23)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1)
testsimulation <- SimulateBasicSolowModel(testgridalt, np,startvals)
# # # View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder("Growth Rate of Capital Stock per Effective Worker"), "free")
# # # View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder("Growth Rate of Capital Stock per Worker"), "free")
testnamel <- c("B", "alpha", "delta", "n", "s")
testivl <- c(2, 1/3,0.1, 0.04, 0.23)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1)
testsimulation <- SimulateBasicSolowModel(testgridalt, np,startvals)
# # # View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder("Growth Rate of Capital Stock per Worker"), "free")
# # # View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder("Growth Rate of Capital Stock per Effective Worker"), "free")
# # Testing
testnamel <- c("B", "alpha", "delta", "n", "s")
testivl <- c(2, 1/3,0.1, 0.04, 0.23)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1)
testsimulation <- SimulateBasicSolowModel(testgridalt, np,startvals)
# # # View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder("Growth Rate of Capital Stock per Effective Worker"), "free")
# # # View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder("Growth Rate of Capital Stock per Worker"), "free")
# Meta-Information All Variables =================================
meta_BS_variables <-
c(
"Capital Stock",
"Labor Stock",
"Output",
"Capital Stock per Worker",
"Output per Worker",
"Output per Effective Worker",
"Capital Stock per Effective Worker",
"Wage Rate",
"Rental Rate",
"Log of Capital Stock",
"Log of Capital Stock per Worker",
"Log of Capital Stock per Effective Worker",
"Log of Output",
"Log of Output per Worker",
"Log of Output per Effective Worker",
"Growth Rate of Output",
"Growth Rate of Output per Worker",
"Growth Rate of Output per Effective Worker",
"Growth Rate of Capital Stock",
"Growth Rate of Capital Stock per Worker",
"Growth Rate of Capital Stock per Effective Worker"
)
# 1.1 Simulate the Basic Solow Model =================================
SimulateBasicSolowModel <- function(paragrid, np, startvals){
# Inputs ---------------------------------
# paragrid for parameter grid;
# np for number of periods;
# vts for vars to simulat
# Load Basic Model Functions ---------------------------------
source("BSModelFunctions.R")
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_BS_variables), np)
# Fill Start Values for Period 0 ---------------------------------
aux_index <- which(sim_table$period == 0)
sim_table[[aux_index, "L"]] <- startvals$L
sim_table[[aux_index, "K"]] <- startvals$K
sim_table[[aux_index, "Y"]] <- BS_MF_Y(paragrid[["B"]][[which(paragrid$period == 0)]],
sim_table[["K"]][[which(sim_table$period == 0)]],
sim_table[["L"]][[which(sim_table$period == 0)]],
paragrid[["alpha"]][[which(paragrid$period == 0)]])
# Computing Variables after Period 0 ---------------------------------
for (i in 1:np){
# i <- 1
# print(i)
aux_index <- which(sim_table$period == i)
sim_table[[aux_index, "L"]] <- BS_MF_LN(paragrid[["n"]][[which(paragrid$period == i-1)]],
sim_table[["L"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "K"]] <- BS_MF_KN(paragrid[["s"]][[which(paragrid$period == i-1)]],
sim_table[["Y"]][[which(sim_table$period == i-1)]],
paragrid[["delta"]][[which(paragrid$period == i-1)]],
sim_table[["K"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "Y"]] <- BS_MF_Y(paragrid[["B"]][[which(paragrid$period == i)]],
sim_table[["K"]][[which(sim_table$period == i)]],
sim_table[["L"]][[which(sim_table$period == i)]],
paragrid[["alpha"]][[which(paragrid$period == i)]])
}
# Computing Additional Variables ---------------------------------
remaining_vars_to_compute_bool <- names(sim_table) %in% c("period", "L", "K", "Y")
sim_table <- add_var_computer(sim_table, remaining_vars_to_compute_bool, paragrid, "exo", "BS")
return(sim_table)
}
# # Testing
testnamel <- c("B", "alpha", "delta", "n", "s")
testivl <- c(2, 1/3,0.1, 0.04, 0.23)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1)
testsimulation <- SimulateBasicSolowModel(testgridalt, np,startvals)
# # # View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder("Growth Rate of Capital Stock per Worker"), "free")
# # # View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder("Capital Stock per Worker"), "free")
# # # View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder("Capital Stock per Effective Worker"), "free")
testivl <- c(1, 1/3,0.1, 0.04, 0.23)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1)
testsimulation <- SimulateBasicSolowModel(testgridalt, np,startvals)
# # # View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder("Capital Stock per Effective Worker"), "free")
# # # View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder("Capital Stock per Worker"), "free")
# # # View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder("Capital Stock per Worker"), "free")
