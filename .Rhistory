# Fill Start Values for Period 0 ---------------------------------
aux_index <- which(sim_table$period == 0)
sim_table[[aux_index, "TFP"]] <- startvals$A
sim_table[[aux_index, "L"]] <- startvals$L
sim_table[[aux_index, "K"]] <- startvals$K
sim_table[[aux_index, "R"]] <- startvals$R
sim_table[[aux_index, "E"]] <- ESSROL_MF_E(paragrid[[aux_index, "sE"]], sim_table[[aux_index, "R"]])
sim_table[[aux_index, "Y"]] <- ESSROL_MF_Y(sim_table[[aux_index, "TFP"]],
sim_table[[aux_index, "K"]],
sim_table[[aux_index, "L"]],
sim_table[[aux_index, "E"]],
paragrid[[aux_index, "X"]],
paragrid[[aux_index, "alpha"]],
paragrid[[aux_index, "beta"]],
paragrid[[aux_index, "kappa"]])
# Computing Variables after Period 0 ---------------------------------
for (i in 1:np){
# i <- 1
aux_index <- which(sim_table$period == i)
sim_table[[aux_index, "TFP"]] <- ESSROL_MF_AN(paragrid[["g"]][[which(paragrid$period == i-1)]],
sim_table[["TFP"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "L"]] <- ESSROL_MF_LN(paragrid[["n"]][[which(paragrid$period == i-1)]],
sim_table[["L"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "K"]] <- ESSROL_MF_KN(paragrid[["s"]][[which(paragrid$period == i-1)]],
sim_table[["Y"]][[which(sim_table$period == i-1)]],
paragrid[["delta"]][[which(paragrid$period == i-1)]],
sim_table[["K"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "R"]] <- ESSROL_MF_RN(sim_table[[aux_index -1, "E"]], sim_table[[aux_index - 1, "R"]])
sim_table[[aux_index, "E"]] <- ESSROL_MF_E(paragrid[[aux_index, "sE"]], sim_table[[aux_index, "R"]])
sim_table[[aux_index, "Y"]] <- ESSROL_MF_Y(sim_table[[aux_index, "TFP"]],
sim_table[[aux_index, "K"]],
sim_table[[aux_index, "L"]],
sim_table[[aux_index, "E"]],
paragrid[[aux_index, "X"]],
paragrid[[aux_index, "alpha"]],
paragrid[[aux_index, "beta"]],
paragrid[[aux_index, "kappa"]])
}
# Computing Additional Variables ---------------------------------
remaining_vars_to_compute_bool <- names(sim_table) %in% c("period","TFP", "L", "K", "Y", "E", "R")
sim_table <- add_var_computer(sim_table, remaining_vars_to_compute_bool, paragrid, "endo", "ESSRO")
return(sim_table)
}
# # Testing
testnamel <- c("alpha", "beta", "kappa", "delta", "n", "s", "sE", "g", "X")
testivl <- c(0.33, 0.2, 0.2, 0.1, 0.02, 0.2, 0.05, 0.05, 5)
testpfcl <- c(NA,NA,NA, NA, NA, NA, NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(A = 1, K = 1, L = 1, R = 1)
testsimulation <- SimulateExtendedSolowModelScarceResourceLand(testgridalt, np,startvals)
testsimulation
getwd()
#                 "SimulateExtendedSolowModelScarceResourceOil",
#                 c("A", "K", "L", "R"))
# augmentShinyApp(c("alpha", "beta", "kappa", "delta", "n", "s", "g", "X"),
#                 "ESSRL",
#                 "SimulateExtendedSolowModelScarceResourceLand",
#                 c("A", "K", "L"))
# augmentShinyApp(c("alpha", "beta", "kappa", "delta", "n", "s", "sE", "g", "X"),
#                 "ESSROL",
#                 "SimulateExtendedSolowModelScarceResourceOilAndLand",
#                 c("A", "K", "L"))
augmentShinyApp( c("alpha", "beta", "kappa", "delta", "n", "s", "sE", "g", "X"),
"ESSROL",
"SimulateExtendedSolowModelScarceResourceOilAndLand",
c("A", "K", "L"))
# Automating Page Creation in Shiny App Macro Models
# Sketch on How To ---------------------------------
# A: Create Sidebar Panel
# 1. Fill parameter slots
# - get parameter name
#[- translator function for n => popgrowth (g => tfpgrowth, ...)]
# - create code for startvalue, change in parameter true or false, change in parameter new value, change in parameter period of change
# B: Create Parameter Grid
# 1. get parameter name
# 2. fill in
# C: Create List with Start Values
# 2. Fill start value slots
# - get input "A"
# - create the entry in the list with the abbreviation
# D: Fill in Model Abbreviation to Serverside Simulation Part
# - find replace for identifying string
# 00 ---------------------------------
# Create duplicate of templates as new directory for new creation
source("HelperFunctions.R")
library(dplyr)
# A ---------------------------------
createpartA <- function(parameternames, new_abbreviation, startvars){
# this function creates the sidebar
code_template <- readLines("PartASnippet.R")
for(aux_parameter in rev(parameternames)){
aux_parameter_code <- code_template
aux_parameter_code <- gsub(pattern = "ESHC", replace = new_abbreviation, x = aux_parameter_code)
aux_parameter_code <- gsub(pattern = "phi", replace = partAhelper_1(aux_parameter), x = aux_parameter_code)
aux_parameter_code <- gsub(pattern = "Phi", replace = partAhelper_2(aux_parameter), x = aux_parameter_code)
line_number_to_write_to <- grep("ParameterCodeAutoFillLineIndexer", read_lines("TemplatePartA.R"))
writeLines(c(read_lines("TemplatePartA.R", n_max = line_number_to_write_to), aux_parameter_code, read_lines("TemplatePartA.R", skip = line_number_to_write_to)), con="TemplatePartA.R")
writeLines(gsub(pattern = "ESHC", replace = new_abbreviation, x = read_lines("TemplatePartA.R")), "TemplatePartA.R")
}
createpartE(startvars, new_abbreviation)
}
# createpartA(c("g", "n"), "ESSRO")
# B ---------------------------------
createpartB <- function(parameternames, new_abbreviation){
code_template <- readLines("PartBSnippet.R")
for(aux_parameter in rev(parameternames)){
# parameternames <- c("g", "n")
aux_template <- code_template
aux_template <- gsub(pattern = "BS", replace = new_abbreviation, x = aux_template)
aux_template <- gsub(pattern = "tfp", replace = partAhelper_1(aux_parameter), x = aux_template)
partBhelper(aux_template[1], "auxspot1", "TemplatePartB.R")
partBhelper(aux_template[2], "auxspot2", "TemplatePartB.R")
partBhelper(aux_template[3], "auxspot3", "TemplatePartB.R")
}
writeLines(gsub(pattern = "BS", replace = new_abbreviation, x = read_lines("TemplatePartB.R")), "TemplatePartB.R")
# removing comma before closing parenthesis (syntax error) — not working — doing manually for now.
# final_template_version <- read_lines("TemplatePartB.R")
# final_template_version_modified <- gsub(pattern = ",$", replace = "", x = final_template_version)
# writeLines(final_template_version_modified, con="TemplatePartB.R")
}
partBhelper <- function(string_to_write, location_index_string, target_file_name){
aux_linenumber_to_write_to <- grep(location_index_string, read_lines(target_file_name))
writeLines(c(read_lines(target_file_name, n_max = aux_linenumber_to_write_to), string_to_write, read_lines(target_file_name, skip = aux_linenumber_to_write_to)), con=target_file_name)
}
# createpartB(c("g", "n"), "ESSRO")
# C ---------------------------------
createpartC <- function(starting_variables, new_abbreviation){
for(var in starting_variables){
aux_code <- paste(var, " = input$ESSOE_initval_", var, ",", sep = "")
aux_code <- gsub("ESSOE", new_abbreviation, x = aux_code)
partBhelper(aux_code, "auxspot1", "TemplatePartC.R")
}
}
# createpartC(c("K", "L"), "ESHC")
# D ---------------------------------
createpartD <- function(new_abbreviation, new_name_of_simulation_function){
text  <- readLines("TemplatePartD.R")
text_modified  <- gsub(pattern = "ESHC", replace = new_abbreviation, x = text)
text_modified  <- gsub(pattern = "SimulateExtendedSolowModelHumanCapital", replace = new_name_of_simulation_function, x = text_modified)
writeLines(text_modified, con="TemplatePartD.R")
}
# createpartD("ESSRO", "SimulateExtendedSolowModelScarceResourceOil")
# E ---------------------------------
createpartE <- function(startingvariables, new_abbreviation){
for(i in rev(startingvariables)){
aux_code <- paste('numericInput("', new_abbreviation, '_initval_', i, '", "Initial Value of _____________", 5),', sep = "")
partBhelper(aux_code, "StartingValuesCodeAutoFillLineIndexer", "TemplatePartA.R")
}
}
# Create it all ---------------------------------
augmentShinyApp <- function(parameters, abbreviation, name_of_sim_function, startvars){
setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants/AutomatingPageCreation")
system(paste("mkdir", abbreviation))
system(paste("cp -R Template/. ", abbreviation, "/", sep = ""))
# Changing working directory to that newly created folder
setwd(paste(abbreviation))
createpartA(parameters, abbreviation, startvars)
createpartB(parameters, abbreviation)
createpartC(startvars, abbreviation)
createpartD(abbreviation, name_of_sim_function)
for(i in c(LETTERS[1:4])){
aux_file <- readLines("TemplatePartX.R" %>% str_replace("X", i))
write(paste("##########"), file = "CollectionOfSnippets.R", append = T)
write(paste("          ", "Part:", i), file = "CollectionOfSnippets.R", append = T)
write(paste("##########"), file = "CollectionOfSnippets.R", append = T)
write(aux_file, file = "CollectionOfSnippets.R", append = T)
}
file.rename("CollectionOfSnippets.R", paste(abbreviation, "CollectionOfSnippets.R", sep = ""))
}
#                 "SimulateExtendedSolowModelScarceResourceOil",
#                 c("A", "K", "L", "R"))
# augmentShinyApp(c("alpha", "beta", "kappa", "delta", "n", "s", "g", "X"),
#                 "ESSRL",
#                 "SimulateExtendedSolowModelScarceResourceLand",
#                 c("A", "K", "L"))
# augmentShinyApp(c("alpha", "beta", "kappa", "delta", "n", "s", "sE", "g", "X"),
#                 "ESSROL",
#                 "SimulateExtendedSolowModelScarceResourceOilAndLand",
#                 c("A", "K", "L"))
augmentShinyApp( c("alpha", "beta", "kappa", "delta", "n", "s", "sE", "g", "X"),
"ESSROL",
"SimulateExtendedSolowModelScarceResourceOilAndLand",
c("A", "K", "L"))
source("SimulationFunctions/ESSROL.R")
getwd()
# Set Path
setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants")
source("SimulationFunctions/ESSROL.R")
## Setup =================================
# Clean Start ---------------------------------
# rm(list = ls())
# Set Path
# setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants")
# getwd()
# Loading Libraries ---------------------------------
# temporarily abandoned package managing function
# detach_package <- function(pkg, character.only = FALSE)
# {
#   if(!character.only)
#   {
#     pkg <- deparse(substitute(pkg))
#   }
#   search_item <- paste("package", pkg, sep = ":")
#   while(search_item %in% search())
#   {
#     detach(search_item, unload = TRUE, character.only = TRUE)
#   }
# }
# detach_package("broom", TRUE)
# broom::augment()
# package_organiser("broom")
# package_organiser <- function(string){
#   if(!require(string, character.only = TRUE)){
#   install.packages(string)
#   library(string, character.only = TRUE)
# }else{
#   library(string, character.only = TRUE)
# }
# }
# #
library(tidyverse)
library(shiny)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
library(tidyverse)
# library(modelr)
library(ggplot2)
# library(stargazer)
library(R.utils)
# library(reactlog)
# reactlog_enable()
# ggplot2 Setup ---------------------------------
theme_set(
theme_classic() +
theme(
axis.ticks.length = unit(-0.25, "cm"),
axis.text.x = element_text(margin = unit(c(0.4, 0, 0, 0), "cm")),
axis.text.y = element_text(margin = unit(c(0, 0.4, 0, 0), "cm")),
axis.line = element_blank(),
panel.grid.major.y = element_line(linetype = 2),
plot.title = element_text(hjust = 0.5),
text = element_text(family = "serif"),
legend.justification = c("right", "top"),
# legend.position = c(1, 1),
legend.position = c(.98, .98),
legend.background = element_rect(fill = NA, color = "black"),
panel.border = element_rect(fill = NA, size = 1.25),
strip.text = element_text(size = 12)
# legend.margin = margin(6, 10, 6, 6)
# legend.box.background = element_rect(colour = "black")
)
)
# Sourcing Simulation Functions and Helper Functions ---------------------------------
source("HelperFunctions.R")
source("SimulationFunctions/BS.R")
source("SimulationFunctions/GS.R")
source("SimulationFunctions/ESSOE.R")
source("SimulationFunctions/ESHC.R")
source("SimulationFunctions/ESSRO.R")
source("SimulationFunctions/ESSRL.R")
source("SimulationFunctions/ESSROL.R")
source("CompareModels.R")
# Essential Sourcing Function ---------------------------------
source("ShinyAppSourcer.R")
# getShinyPart <- function(kind, which, n_ModelComparison=0) {
#   # kind for "server" or "tab"
#   # which for the abbreviation of the respective part
#   # kind <- "S"
#   # which <- "BS"
#   # n_ModelComparison <- 1
#   if (kind %in% c("S", "T", "D")) {} else {
#     stop("The entered value for 'kind' in getShinyPart() is not defined.")
#   }
#   if(kind == "D" && n_ModelComparison == 0){stop("When using 'D' in getShinyPart() make sure to deliver an appropriate value to n_ModelComparison")}
#   source_part1 <- if(kind == "T"){"Tabs"}else if(kind == "S"){"ServerParts"}else if(kind == "D"){"DynamicInterfaces"}
#   source_part2 <- if(kind == "T"){"Tab.R"}else if(kind == "S"){"Server.R"}else if(kind == "D"){"DynamicInterface.R"}
#   path_to_source <- paste0(
#     source_part1,
#     "/",
#     ifelse(kind == "D", paste0("Group", n_ModelComparison, "/"), ""),
#     which,
#     source_part2
#   )
#
#   if(kind == "T"){
#     source(path_to_source)
#     return(get(paste0(which, "Tab")))
#   }else if(kind == "S"){
#     # source(path_to_source, local = TRUE)
#   }else if(kind == "D"){
#     source(path_to_source)
#     return(get(paste0(which, "DynamicInterface")))
#   }
# }
# Shiny App =================================
shinyApp(
ui = fluidPage(
# tags$head(
#   tags$style(
#     "#inTabset {
#     position: fixed;
#     width: 100%;
#     background-color: white;
#     top: 0;
#     }",
#     ".tab-content  {
#     margin-top: 80px;
#   }"
#   )
# ),
theme = shinytheme("cerulean"),
titlePanel("Solow Growth Models in Macroeconomic Theory"),
# Loading Tabs ---------------------------------
tabsetPanel(type = "pills",
# id = "inTabset",
getShinyPart("T", "StartPage"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
getShinyPart("T", "ESSRL"),
getShinyPart("T", "ESSROL"),
getShinyPart("T", "Comparison")
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ESSROLServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
session$onSessionEnded(stopApp)
}
)
##########################################3
###   Mistake in CompareModels.R the startvals cannot be accessed in the advanced create_startvals_list function.
### create_startvals_list does not read "input" but some atomic vector
##########################################3
## Setup =================================
# Clean Start ---------------------------------
# rm(list = ls())
# Set Path
# setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants")
# getwd()
# Loading Libraries ---------------------------------
# temporarily abandoned package managing function
# detach_package <- function(pkg, character.only = FALSE)
# {
#   if(!character.only)
#   {
#     pkg <- deparse(substitute(pkg))
#   }
#   search_item <- paste("package", pkg, sep = ":")
#   while(search_item %in% search())
#   {
#     detach(search_item, unload = TRUE, character.only = TRUE)
#   }
# }
# detach_package("broom", TRUE)
# broom::augment()
# package_organiser("broom")
# package_organiser <- function(string){
#   if(!require(string, character.only = TRUE)){
#   install.packages(string)
#   library(string, character.only = TRUE)
# }else{
#   library(string, character.only = TRUE)
# }
# }
# #
library(tidyverse)
library(shiny)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
library(tidyverse)
# library(modelr)
library(ggplot2)
# library(stargazer)
library(R.utils)
# library(reactlog)
# reactlog_enable()
# ggplot2 Setup ---------------------------------
theme_set(
theme_classic() +
theme(
axis.ticks.length = unit(-0.25, "cm"),
axis.text.x = element_text(margin = unit(c(0.4, 0, 0, 0), "cm")),
axis.text.y = element_text(margin = unit(c(0, 0.4, 0, 0), "cm")),
axis.line = element_blank(),
panel.grid.major.y = element_line(linetype = 2),
plot.title = element_text(hjust = 0.5),
text = element_text(family = "serif"),
legend.justification = c("right", "top"),
# legend.position = c(1, 1),
legend.position = c(.98, .98),
legend.background = element_rect(fill = NA, color = "black"),
panel.border = element_rect(fill = NA, size = 1.25),
strip.text = element_text(size = 12)
# legend.margin = margin(6, 10, 6, 6)
# legend.box.background = element_rect(colour = "black")
)
)
# Sourcing Simulation Functions and Helper Functions ---------------------------------
source("HelperFunctions.R")
source("SimulationFunctions/BS.R")
source("SimulationFunctions/GS.R")
source("SimulationFunctions/ESSOE.R")
source("SimulationFunctions/ESHC.R")
source("SimulationFunctions/ESSRO.R")
source("SimulationFunctions/ESSRL.R")
source("SimulationFunctions/ESSROL.R")
source("CompareModels.R")
# Essential Sourcing Function ---------------------------------
source("ShinyAppSourcer.R")
# getShinyPart <- function(kind, which, n_ModelComparison=0) {
#   # kind for "server" or "tab"
#   # which for the abbreviation of the respective part
#   # kind <- "S"
#   # which <- "BS"
#   # n_ModelComparison <- 1
#   if (kind %in% c("S", "T", "D")) {} else {
#     stop("The entered value for 'kind' in getShinyPart() is not defined.")
#   }
#   if(kind == "D" && n_ModelComparison == 0){stop("When using 'D' in getShinyPart() make sure to deliver an appropriate value to n_ModelComparison")}
#   source_part1 <- if(kind == "T"){"Tabs"}else if(kind == "S"){"ServerParts"}else if(kind == "D"){"DynamicInterfaces"}
#   source_part2 <- if(kind == "T"){"Tab.R"}else if(kind == "S"){"Server.R"}else if(kind == "D"){"DynamicInterface.R"}
#   path_to_source <- paste0(
#     source_part1,
#     "/",
#     ifelse(kind == "D", paste0("Group", n_ModelComparison, "/"), ""),
#     which,
#     source_part2
#   )
#
#   if(kind == "T"){
#     source(path_to_source)
#     return(get(paste0(which, "Tab")))
#   }else if(kind == "S"){
#     # source(path_to_source, local = TRUE)
#   }else if(kind == "D"){
#     source(path_to_source)
#     return(get(paste0(which, "DynamicInterface")))
#   }
# }
# Shiny App =================================
shinyApp(
ui = fluidPage(
# tags$head(
#   tags$style(
#     "#inTabset {
#     position: fixed;
#     width: 100%;
#     background-color: white;
#     top: 0;
#     }",
#     ".tab-content  {
#     margin-top: 80px;
#   }"
#   )
# ),
theme = shinytheme("cerulean"),
titlePanel("Solow Growth Models in Macroeconomic Theory"),
# Loading Tabs ---------------------------------
tabsetPanel(type = "pills",
# id = "inTabset",
getShinyPart("T", "StartPage"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
getShinyPart("T", "ESSRL"),
getShinyPart("T", "ESSROL"),
getShinyPart("T", "Comparison")
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ESSROLServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
session$onSessionEnded(stopApp)
}
)
##########################################3
###   Mistake in CompareModels.R the startvals cannot be accessed in the advanced create_startvals_list function.
### create_startvals_list does not read "input" but some atomic vector
##########################################3
# # Testing
testnamel <- c("alpha", "beta", "kappa", "delta", "n", "s", "sE", "g", "X")
testivl <- c(0.33, 0.2, 0.2, 0.1, 0.02, 0.2, 0.05, 0.05, 5)
length(testivl)
length(testnamel)
