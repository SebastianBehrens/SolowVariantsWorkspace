sim_table[[aux_index, "K"]] <- ESSRL_MF_KN(paragrid[[aux_index -1, "s"]],
sim_table[[aux_index - 1, "Y"]],
paragrid[[aux_index -1, "delta"]],
sim_table[[aux_index -1, "K"]])
sim_table[[aux_index, "L"]] <- ESSRL_MF_LN(paragrid[[aux_index - 1, "n"]],
sim_table[[aux_index - 1, "L"]])
sim_table[[aux_index, "Y"]] <- ESSRL_MF_Y(sim_table[[aux_index, "TFP"]],
sim_table[[aux_index, "K"]],
sim_table[[aux_index, "L"]],
paragrid[[aux_index, "X"]],
paragrid[[aux_index, "alpha"]],
paragrid[[aux_index, "beta"]])
}
i <- 1
sim_table[[aux_index, "TFP"]] <- ESSRL_MF_AN(paragrid[[aux_index - 1, "g"]],
sim_table[[aux_index - 1, "TFP"]])
sim_table[[aux_index, "K"]] <- ESSRL_MF_KN(paragrid[[aux_index -1, "s"]],
sim_table[[aux_index - 1, "Y"]],
paragrid[[aux_index -1, "delta"]],
sim_table[[aux_index -1, "K"]])
paragrid[[aux_index -1, "s"]]
sim_table[[aux_index - 1, "Y"]]
paragrid[[aux_index -1, "delta"]]
# Testing
testnamel <- c("alpha", "beta", "delta", "n", "s", "g", "X")
testivl <- c(0.33, 0.2, 0.1, 0.02, 0.2, 0.05, 5)
testpfcl <- c(NA,NA,NA, NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(L = 1, K = 1, A = 1)
testsimulation <- SimulateExtendedSolowModelScarceResourceLand(testgridalt, np,startvals)
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_ESSRL_variables), np)
# Fill Start Values for Period 0 ---------------------------------
aux_index <- which(sim_table$period == 0)
sim_table[[aux_index, "TFP"]] <- startvals$A
sim_table[[aux_index, "L"]] <- startvals$L
sim_table[[aux_index, "K"]] <- startvals$K
sim_table[[aux_index, "Y"]] <- ESSRL_MF_Y(sim_table[[aux_index, "TFP"]],
sim_table[[aux_index, "K"]],
sim_table[[aux_index, "L"]],
paragrid[[aux_index, "X"]],
paragrid[[aux_index, "alpha"]],
paragrid[[aux_index, "beta"]])
i <- 1
# i <- 1
aux_index <- which(sim_table$period == i)
sim_table[[aux_index, "TFP"]] <- ESSRL_MF_AN(paragrid[[aux_index - 1, "g"]],
sim_table[[aux_index - 1, "TFP"]])
sim_table[[aux_index, "K"]] <- ESSRL_MF_KN(paragrid[[aux_index -1, "s"]],
sim_table[[aux_index - 1, "Y"]],
paragrid[[aux_index -1, "delta"]],
sim_table[[aux_index -1, "K"]])
paragrid[[aux_index -1, "delta"]]
# Testing
testnamel <- c("alpha", "beta", "delta", "n", "s", "g", "X")
testivl <- c(0.33, 0.2, 0.1, 0.02, 0.2, 0.05, 5)
testpfcl <- c(NA,NA,NA, NA, NA, NA)
# Testing
testnamel <- c("alpha", "beta", "delta", "n", "s", "g", "X")
testivl <- c(0.33, 0.2, 0.1, 0.02, 0.2, 0.05, 5)
testpfcl <- c(NA,NA,NA, NA, NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_ESSRL_variables), np)
# Fill Start Values for Period 0 ---------------------------------
aux_index <- which(sim_table$period == 0)
sim_table[[aux_index, "TFP"]] <- startvals$A
sim_table[[aux_index, "L"]] <- startvals$L
sim_table[[aux_index, "K"]] <- startvals$K
sim_table[[aux_index, "Y"]] <- ESSRL_MF_Y(sim_table[[aux_index, "TFP"]],
sim_table[[aux_index, "K"]],
sim_table[[aux_index, "L"]],
paragrid[[aux_index, "X"]],
paragrid[[aux_index, "alpha"]],
paragrid[[aux_index, "beta"]])
i <- 1
# i <- 1
aux_index <- which(sim_table$period == i)
sim_table[[aux_index, "TFP"]] <- ESSRL_MF_AN(paragrid[[aux_index - 1, "g"]],
sim_table[[aux_index - 1, "TFP"]])
sim_table[[aux_index, "K"]] <- ESSRL_MF_KN(paragrid[[aux_index -1, "s"]],
sim_table[[aux_index - 1, "Y"]],
paragrid[[aux_index -1, "delta"]],
sim_table[[aux_index -1, "K"]])
sim_table[[aux_index, "L"]] <- ESSRL_MF_LN(paragrid[[aux_index - 1, "n"]],
sim_table[[aux_index - 1, "L"]])
sim_table[[aux_index, "TFP"]] <- ESSRL_MF_AN(paragrid[[aux_index - 1, "g"]],
sim_table[[aux_index - 1, "TFP"]])
# i <- 1
aux_index <- which(sim_table$period == i)
sim_table
sim_table[[aux_index, "TFP"]] <- ESSRL_MF_AN(paragrid[[aux_index - 1, "g"]],
sim_table[[aux_index - 1, "TFP"]])
sim_table[[aux_index, "K"]] <- ESSRL_MF_KN(paragrid[[aux_index -1, "s"]],
sim_table[[aux_index - 1, "Y"]],
paragrid[[aux_index -1, "delta"]],
sim_table[[aux_index -1, "K"]])
sim_table[[aux_index, "K"]] <- ESSRL_MF_KN(paragrid[[aux_index -1, "s"]],
sim_table[[aux_index - 1, "Y"]],
paragrid[[aux_index -1, "delta"]],
sim_table[[aux_index -1, "K"]])
paragrid[[aux_index -1, "delta"]]
paragrid
# Testing
testnamel <- c("alpha", "beta", "delta", "n", "s", "g", "X")
testivl <- c(0.33, 0.2, 0.1, 0.02, 0.2, 0.05, 5)
testpfcl <- c(NA,NA,NA, NA, NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
paragrid
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_ESSRL_variables), np)
# Fill Start Values for Period 0 ---------------------------------
aux_index <- which(sim_table$period == 0)
sim_table[[aux_index, "TFP"]] <- startvals$A
sim_table[[aux_index, "L"]] <- startvals$L
sim_table[[aux_index, "K"]] <- startvals$K
sim_table[[aux_index, "Y"]] <- ESSRL_MF_Y(sim_table[[aux_index, "TFP"]],
sim_table[[aux_index, "K"]],
sim_table[[aux_index, "L"]],
paragrid[[aux_index, "X"]],
paragrid[[aux_index, "alpha"]],
paragrid[[aux_index, "beta"]])
i <- 1
# i <- 1
aux_index <- which(sim_table$period == i)
sim_table[[aux_index, "TFP"]] <- ESSRL_MF_AN(paragrid[[aux_index - 1, "g"]],
sim_table[[aux_index - 1, "TFP"]])
sim_table[[aux_index, "K"]] <- ESSRL_MF_KN(paragrid[[aux_index -1, "s"]],
sim_table[[aux_index - 1, "Y"]],
paragrid[[aux_index -1, "delta"]],
sim_table[[aux_index -1, "K"]])
sim_table[[aux_index, "L"]] <- ESSRL_MF_LN(paragrid[[aux_index - 1, "n"]],
sim_table[[aux_index - 1, "L"]])
sim_table[[aux_index, "Y"]] <- ESSRL_MF_Y(sim_table[[aux_index, "TFP"]],
sim_table[[aux_index, "K"]],
sim_table[[aux_index, "L"]],
paragrid[[aux_index, "X"]],
paragrid[[aux_index, "alpha"]],
paragrid[[aux_index, "beta"]])
sim_table
# Computing Variables after Period 0 ---------------------------------
for (i in 1:np){
# i <- 1
aux_index <- which(sim_table$period == i)
sim_table[[aux_index, "TFP"]] <- ESSRL_MF_AN(paragrid[[aux_index - 1, "g"]],
sim_table[[aux_index - 1, "TFP"]])
sim_table[[aux_index, "K"]] <- ESSRL_MF_KN(paragrid[[aux_index -1, "s"]],
sim_table[[aux_index - 1, "Y"]],
paragrid[[aux_index -1, "delta"]],
sim_table[[aux_index -1, "K"]])
sim_table[[aux_index, "L"]] <- ESSRL_MF_LN(paragrid[[aux_index - 1, "n"]],
sim_table[[aux_index - 1, "L"]])
sim_table[[aux_index, "Y"]] <- ESSRL_MF_Y(sim_table[[aux_index, "TFP"]],
sim_table[[aux_index, "K"]],
sim_table[[aux_index, "L"]],
paragrid[[aux_index, "X"]],
paragrid[[aux_index, "alpha"]],
paragrid[[aux_index, "beta"]])
}
sim_table
remaining_vars_to_compute_bool <- names(sim_table) %in% c("period", "TFP", "K", "L", "Y")
sim_table <- add_var_computer(sim_table, remaining_vars_to_compute_bool, paragrid, "exo", "ESSOE")
sim_table <- add_var_computer(sim_table, remaining_vars_to_compute_bool, paragrid, "exo", "ESSRL")
sim_table
sim_table <- add_var_computer(sim_table, remaining_vars_to_compute_bool, paragrid, "endo", "ESSRL")
sim_table
# View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder(meta_ESSOE_variables), "free")
# View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder(meta_ESSRL_variables), "free")
# View(testsimulation)
VisualiseSimulation(testsimulation, variable_encoder(meta_ESSRL_variables)[1:4], "free")
testnamel <- c("alpha", "beta", "delta", "n", "s", "g", "X")
testivl <- c(0.33, 0.2, 0.1, 0.02, 0.2, 0.05, 5)
testpfcl <- c(NA,NA,NA, NA, NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(L = 1, K = 1, A = 1)
simulation_land <- SimulateExtendedSolowModelScarceResourceLand(testgridalt, np,startvals)
# Meta-Information All Variables =================================
meta_ESSRL_variables <-
c(
"Total Factor Productivity",
"Capital Stock",
"Labor Stock",
"Output",
"Capital Stock per Worker",
"Output per Worker",
"Capital Stock per Effective Worker",
"Output per Effective Worker",
"Wage Rate",
"Rental Rate",
"Log of Output",
"Log of Output per Worker",
"Log of Output per Effective Worker",
"Log of Capital Stock",
"Log of Capital Stock per Worker",
"Log of Capital Stock per Effective Worker",
"Growth Rate of Output",
"Growth Rate of Output per Worker",
"Growth Rate of Output per Effective Worker",
"Growth Rate of Capital Stock",
"Growth Rate of Capital Stock per Worker",
"Growth Rate of Capital Stock per Effective Worker"
)
# 1.1 Simulate the Basic Solow Model =================================
SimulateExtendedSolowModelScarceResourceLand <- function(paragrid, np, startvals){
# Inputs ---------------------------------
# paragrid for parameter grid;
# np for number of periods;
# Load Basic Model Functions ---------------------------------
source("ESSRLModelFunctions.R")
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_ESSRL_variables), np)
# Fill Start Values for Period 0 ---------------------------------
aux_index <- which(sim_table$period == 0)
sim_table[[aux_index, "TFP"]] <- startvals$A
sim_table[[aux_index, "L"]] <- startvals$L
sim_table[[aux_index, "K"]] <- startvals$K
sim_table[[aux_index, "Y"]] <- ESSRL_MF_Y(sim_table[[aux_index, "TFP"]],
sim_table[[aux_index, "K"]],
sim_table[[aux_index, "L"]],
paragrid[[aux_index, "X"]],
paragrid[[aux_index, "alpha"]],
paragrid[[aux_index, "beta"]])
# Computing Variables after Period 0 ---------------------------------
for (i in 1:np){
# i <- 1
aux_index <- which(sim_table$period == i)
sim_table[[aux_index, "TFP"]] <- ESSRL_MF_AN(paragrid[[aux_index - 1, "g"]],
sim_table[[aux_index - 1, "TFP"]])
sim_table[[aux_index, "K"]] <- ESSRL_MF_KN(paragrid[[aux_index -1, "s"]],
sim_table[[aux_index - 1, "Y"]],
paragrid[[aux_index -1, "delta"]],
sim_table[[aux_index -1, "K"]])
sim_table[[aux_index, "L"]] <- ESSRL_MF_LN(paragrid[[aux_index - 1, "n"]],
sim_table[[aux_index - 1, "L"]])
sim_table[[aux_index, "Y"]] <- ESSRL_MF_Y(sim_table[[aux_index, "TFP"]],
sim_table[[aux_index, "K"]],
sim_table[[aux_index, "L"]],
paragrid[[aux_index, "X"]],
paragrid[[aux_index, "alpha"]],
paragrid[[aux_index, "beta"]])
}
# Computing Additional Variables ---------------------------------
remaining_vars_to_compute_bool <- names(sim_table) %in% c("period", "TFP", "K", "L", "Y")
sim_table <- add_var_computer(sim_table, remaining_vars_to_compute_bool, paragrid, "endo", "ESSRL")
# View(sim_table)
return(sim_table)
}
# Testing
testnamel <- c("alpha", "beta", "delta", "n", "s", "g", "X")
testivl <- c(0.33, 0.2, 0.1, 0.02, 0.2, 0.05, 5)
testpfcl <- c(NA,NA,NA, NA, NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(L = 1, K = 1, A = 1)
testsimulation <- SimulateExtendedSolowModelScarceResourceLand(testgridalt, np,startvals)
testsimulation_land <- SimulateExtendedSolowModelScarceResourceLand(testgridalt, np,startvals)
testnamel <- c("alpha", "beta", "delta", "n", "s", "g", "X")
testivl <- c(0.33, 0.2, 0.1, 0.02, 0.2, 0.05, 5)
testpfcl <- c(NA,NA,NA, NA, NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(L = 1, K = 1, A = 1)
testsimulation_land <- SimulateExtendedSolowModelScarceResourceLand(testgridalt, np,startvals)
# Meta-Information All Variables =================================
meta_GS_variables <-
c(
"Capital Stock",
"Labor Stock",
"Output",
"Capital Stock per Worker",
"Output per Worker",
"Capital Stock per Effective Worker",
"Output per Effective Worker",
"Wage Rate",
"Rental Rate",
"Log of Output",
"Log of Output per Worker",
"Log of Output per Effective Worker",
"Log of Capital Stock",
"Log of Capital Stock per Worker",
"Log of Capital Stock per Effective Worker",
"Growth Rate of Output",
"Growth Rate of Output per Worker",
"Growth Rate of Output per Effective Worker",
"Growth Rate of Capital Stock",
"Growth Rate of Capital Stock per Worker",
"Growth Rate of Capital Stock per Effective Worker",
"Total Factor Productivity"
)
# 1.1 Simulate the Basic Solow Model =================================
SimulateGeneralSolowModel <- function(paragrid, np, startvals){
# Inputs ---------------------------------
# paragrid for parameter grid;
# np for number of periods;
# vts for vars to simulat
# Load Basic Model Functions ---------------------------------
source("GSModelFunctions.R")
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_GS_variables), np)
# Fill Start Values for Period 0 ---------------------------------
aux_index <- which(sim_table$period == 0)
sim_table[[aux_index, "TFP"]] <- startvals$A
sim_table[[aux_index, "L"]] <- startvals$L
sim_table[[aux_index, "K"]] <- startvals$K
sim_table[[aux_index, "Y"]] <- GS_MF_Y(sim_table[["TFP"]][[which(sim_table$period == 0)]],
sim_table[["K"]][[which(sim_table$period == 0)]],
sim_table[["L"]][[which(sim_table$period == 0)]],
paragrid[["alpha"]][[which(paragrid$period == 0)]])
# Computing Variables after Period 0 ---------------------------------
for (i in 1:np){
# i <- 1
aux_index <- which(sim_table$period == i)
sim_table[[aux_index, "TFP"]] <- GS_MF_AN(paragrid[["g"]][[which(paragrid$period == i-1)]],
sim_table[["TFP"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "L"]] <- GS_MF_LN(paragrid[["n"]][[which(paragrid$period == i-1)]],
sim_table[["L"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "K"]] <- GS_MF_KN(paragrid[["s"]][[which(paragrid$period == i-1)]],
sim_table[["Y"]][[which(sim_table$period == i-1)]],
paragrid[["delta"]][[which(paragrid$period == i-1)]],
sim_table[["K"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "Y"]] <- GS_MF_Y(sim_table[["TFP"]][[which(sim_table$period == i)]],
sim_table[["K"]][[which(sim_table$period == i)]],
sim_table[["L"]][[which(sim_table$period == i)]],
paragrid[["alpha"]][[which(paragrid$period == i)]])
}
# Computing Additional Variables ---------------------------------
remaining_vars_to_compute_bool <- names(sim_table) %in% c("period","TFP", "L", "K", "Y")
sim_table <- add_var_computer(sim_table, remaining_vars_to_compute_bool, paragrid, "endo", "GS")
return(sim_table)
}
# Simulate General Version
testnamel <- c("g", "alpha", "delta", "n", "s")
testivl <- c(0.1, 1/3,0.1, 0.04, 0.23)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1, A = 1)
testsimulation <- SimulateGeneralSolowModel(testgridalt, np,startvals)
testsimulation_general <- SimulateGeneralSolowModel(testgridalt, np,startvals)
?bind_rows
testsimulation_land %>% mutate(kind = "land") %>% bind_rows(testsimulation_general %>% mutate(kind = "general"))
# Simulate Land Version
testnamel <- c("alpha", "beta", "delta", "n", "s", "g", "X")
testivl <- c(1/3, 0.2, 0.1, 0.02, 0.2, 0.05, 5)
# Simulate Land Version
testnamel <- c("alpha", "beta", "delta", "n", "s", "g", "X")
testivl <- c(1/3, 0.2, 0.1, 0.02, 0.2, 0.05, 5)
testpfcl <- c(NA,NA,NA, NA, NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(L = 1, K = 1, A = 1)
testsimulation_land <- SimulateExtendedSolowModelScarceResourceLand(testgridalt, np,startvals)
# Simulate General Version
testnamel <- c("g", "alpha", "delta", "n", "s")
testivl <- c(0.05, 1/3,0.1, 0.02, 0.2)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 50
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1, A = 1)
testsimulation_general <- SimulateGeneralSolowModel(testgridalt, np,startvals)
combined <-
testsimulation_land %>% mutate(kind = "land") %>% bind_rows(testsimulation_general %>% mutate(kind = "general"))
combined %>% pull(kind)
combined %>% pull(kind) %>% head()
combined %>% mutate(kind = factor(kind)) %>% pivot_longer(-period, names_to = "Variable") %>%
mutate(Variable = as.factor(Variable)) %>%
ggplot(aes(period, value, col = kind)) +
geom_line() +
facet_wrap(~Variable, scales = scale_identifier, ncol = 2)+
labs(x = "Period", y = "Value") +
theme(legend.position = "none")
combined %>% mutate(kind = factor(kind)) %>% pivot_longer(-period, names_to = "Variable") %>%
mutate(Variable = as.factor(Variable))
combined %>% mutate(kind = factor(kind))
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% pivot_longer(-period, names_to = "Variable") %>%
mutate(Variable = as.factor(Variable)) %>%
ggplot(aes(period, value, col = kind)) +
geom_line() +
facet_wrap(~Variable, scales = "free", ncol = 2)+
labs(x = "Period", y = "Value") +
theme(legend.position = "none")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% pivot_longer(-period, -kind, names_to = "Variable")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% pivot_longer(-period, -kind, names_to = "Variable")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0))
?pivot_longer
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% pivot_longer(any_of(kind, period), names_to = "Variable")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% pivot_longer(-any_of(kind, period), names_to = "Variable")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% pivot_longer(-any_of(kind, period), names_to = "Variable")
any_of(kind, period)
any_of("kind", "period")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% pivot_longer(-any_of("kind", "period"), names_to = "Variable")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% pivot_longer(-c("period", "kind"), names_to = "Variable")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% pivot_longer(-c("period", "kind"), names_to = "Variable") %>%
mutate(Variable = as.factor(Variable)) %>%
ggplot(aes(period, value, col = kind)) +
geom_line() +
facet_wrap(~Variable, scales = "free", ncol = 2)+
labs(x = "Period", y = "Value") +
theme(legend.position = "none")
names(combined)[1:5]
names(combined)[c(4, 6, 12, 9)]
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% select(all_of(names(combined)[c(4, 6, 12, 9)])) %>% pivot_longer(-c("period", "kind"), names_to = "Variable") %>%
mutate(Variable = as.factor(Variable)) %>%
ggplot(aes(period, value, col = kind)) +
geom_line() +
facet_wrap(~Variable, scales = "free", ncol = 2)+
labs(x = "Period", y = "Value") +
theme(legend.position = "none")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% select(all_of(names(combined)[c(4, 6, 12, 9)], period, kind))
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% select(all_of(names(combined)[c(4, 6, 12, 9)], period, kind))
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% select(all_of(names(combined)[c(4, 6, 12, 9)], period, kind))
names(combined)[c(4, 6, 12, 9)]
names(combined)
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% select(all_of(names(combined)[c(4, 6, 12, 9, 1, 24)])) %>% pivot_longer(-c("period", "kind"), names_to = "Variable")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% select(all_of(names(combined)[c(4, 6, 12, 9, 1, 24)])) %>% pivot_longer(-c("period", "kind"), names_to = "Variable") %>%
mutate(Variable = as.factor(Variable)) %>%
ggplot(aes(period, value, col = kind)) +
geom_line() +
facet_wrap(~Variable, scales = "free", ncol = 2)+
labs(x = "Period", y = "Value") +
theme(legend.position = "none")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% select(all_of(names(combined)[c(4, 6, 12, 9, 1, 24)])) %>% pivot_longer(-c("period", "kind"), names_to = "Variable") %>%
mutate(Variable = as.factor(Variable)) %>%
ggplot(aes(period, value, group = kind)) +
geom_line() +
facet_wrap(~Variable, scales = "free", ncol = 2)+
labs(x = "Period", y = "Value") +
theme(legend.position = "none")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% select(all_of(names(combined)[c(4, 6, 12, 9, 1, 24)])) %>% pivot_longer(-c("period", "kind"), names_to = "Variable") %>%
mutate(Variable = as.factor(Variable)) %>%
ggplot(aes(period, value, col = kind)) +
geom_line() +
facet_wrap(~Variable, scales = "free", ncol = 2)+
labs(x = "Period", y = "Value") +
theme(legend.position = "none")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% select(all_of(names(combined)[c(4, 6, 12, 9, 1, 24)]))
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% select(all_of(names(combined)[c(4, 6, 12, 9, 1, 24)])) %>% pivot_longer(-c("period", "kind"), names_to = "Variable") %>%
mutate(Variable = as.factor(Variable)) %>%
ggplot(aes(period, value, col = kind, group = kind)) +
geom_line() +
facet_wrap(~Variable, scales = "free", ncol = 2)+
labs(x = "Period", y = "Value") +
theme(legend.position = "none")
combined %>% mutate(kind = ifelse(kind == "land", 1, 0)) %>% select(all_of(names(combined)[c(4, 6, 12, 9, 1, 24)])) %>% pivot_longer(-c("period", "kind"), names_to = "Variable") %>%
mutate(Variable = as.factor(Variable)) %>%
ggplot(aes(period, value, col = kind, group = kind)) +
geom_line() +
facet_wrap(~Variable, scales = "free", ncol = 2)+
labs(x = "Period", y = "Value")
combined %>% mutate(kind = factor(kind))
combined %>% mutate(kind = factor(kind)) %>% select(all_of(names(combined)[c(4, 6, 12, 9, 1, 24)])) %>% pivot_longer(-c("period", "kind"), names_to = "Variable") %>%
mutate(Variable = as.factor(Variable)) %>%
ggplot(aes(period, value, col = kind, group = kind)) +
geom_line() +
facet_wrap(~Variable, scales = "free", ncol = 2)+
labs(x = "Period", y = "Value")
anscombe
?anscombe
anscombe
summary(anscombe)
##-- now some "magic" to do the 4 regressions in a loop:
ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
## or   ff[[2]] <- as.name(paste0("y", i))
##      ff[[3]] <- as.name(paste0("x", i))
mods[[i]] <- lmi <- lm(ff, data = anscombe)
print(anova(lmi))
}
## See how close they are (numerically!)
sapply(mods, coef)
lapply(mods, function(fm) coef(summary(fm)))
## Now, do what you should have done in the first place: PLOTS
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)
combined %>% mutate(kind = factor(kind)) %>% select(all_of(names(combined)[c(4, 6, 12, 9, 1, 24)])) %>% pivot_longer(-c("period", "kind"), names_to = "Variable") %>%
mutate(Variable = as.factor(Variable)) %>%
ggplot(aes(period, value, col = kind, group = kind)) +
geom_line() +
facet_wrap(~Variable, scales = "free", ncol = 2)+
labs(x = "Period", y = "Value")
