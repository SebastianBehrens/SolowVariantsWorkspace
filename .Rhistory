source("HelperFunctions.R")
source("SimulationFunctions/BS.R")
source("SimulationFunctions/GS.R")
source("SimulationFunctions/ESSOE.R")
source("SimulationFunctions/ESHC.R")
source("SimulationFunctions/ESSRO.R")
source("SimulationFunctions/ESSRL.R")
source("SimulationFunctions/ESSROL.R")
source("CompareModels.R")
# Essential Sourcing Function ---------------------------------
source("ShinyAppSourcer.R")
# getShinyPart <- function(kind, which, n_ModelComparison=0) {
#   # kind for "server" or "tab"
#   # which for the abbreviation of the respective part
#   # kind <- "S"
#   # which <- "BS"
#   # n_ModelComparison <- 1
#   if (kind %in% c("S", "T", "D")) {} else {
#     stop("The entered value for 'kind' in getShinyPart() is not defined.")
#   }
#   if(kind == "D" && n_ModelComparison == 0){stop("When using 'D' in getShinyPart() make sure to deliver an appropriate value to n_ModelComparison")}
#   source_part1 <- if(kind == "T"){"Tabs"}else if(kind == "S"){"ServerParts"}else if(kind == "D"){"DynamicInterfaces"}
#   source_part2 <- if(kind == "T"){"Tab.R"}else if(kind == "S"){"Server.R"}else if(kind == "D"){"DynamicInterface.R"}
#   path_to_source <- paste0(
#     source_part1,
#     "/",
#     ifelse(kind == "D", paste0("Group", n_ModelComparison, "/"), ""),
#     which,
#     source_part2
#   )
#
#   if(kind == "T"){
#     source(path_to_source)
#     return(get(paste0(which, "Tab")))
#   }else if(kind == "S"){
#     # source(path_to_source, local = TRUE)
#   }else if(kind == "D"){
#     source(path_to_source)
#     return(get(paste0(which, "DynamicInterface")))
#   }
# }
# Shiny App =================================
shinyApp(
ui = fluidPage(
# tags$head(
#   tags$style(
#     "#inTabset {
#     position: fixed;
#     width: 100%;
#     background-color: white;
#     top: 0;
#     }",
#     ".tab-content  {
#     margin-top: 80px;
#   }"
#   )
# ),
theme = shinytheme("cerulean"),
titlePanel("Solow Growth Models in Macroeconomic Theory"),
# Loading Tabs ---------------------------------
tabsetPanel(type = "pills",
# id = "inTabset",
getShinyPart("T", "StartPage"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
getShinyPart("T", "ESSRL"),
getShinyPart("T", "ESSROL"),
getShinyPart("T", "Comparison")
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ESSROLServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
session$onSessionEnded(stopApp)
}
)
rbinom(5000000, 1, 0.5)
aux <- rbinom(5000000, 1, 0.5)
var(aux)
n <- 5000000
aux <- rbinom(n, 1, 0.5)
var(aux)
n * 0.5 * 0.5
(n * 0.5 * 0.5)^2
aux
aux <- rbinom(n, 1, 0.5)
var(aux)
var(aux)
(n * 0.5 * 0.5)^2
n <- 5000000
aux <- rbinom(n, 1, 0.5)
var(aux)
(n * 0.5 * 0.5)^2
(n * 0.5 * 0.5)
n <- 500
aux <- rbinom(n, 1, 0.5)
var(aux)
(n * 0.5 * 0.5)
(n * 0.5 * 0.5)
aux <- rbinom(n, 1, 0.5)
var(aux)
(n * 0.5 * 0.5)
n <- 500
aux <- rbinom(n, 1, 0.5)
var(aux)
(n * 0.5 * 0.5)
p <- 0.5
aux <- rbinom(n, 1, p)
n * p * (1-p)
var(aux)
var(aux)
aux <- rbinom(1, n, p)
var(aux)
n * p * (1-p)
n <- 500
p <- 0.5
aux <- rbinom(1, n, p)
aux
aux <- rbinom(10000, n, p)
var(aux)
n * p * (1-p)
aux <- rbinom(10000, 1, p)
var(aux)
1 * p * (1-p)
n <- 500
p <- 0.5
aux <- rbinom(10000, n, p)
var(aux)
n * p * (1-p)
aux <- rbinom(10000, n, p)
var(aux)
n * p * (1-p)
n <- 500
n <- 500
p <- 0.5
aux <- rbinom(10000, n, p)
var(aux)
n * p * (1-p)
aux <- rbinom(100000, n, p)
var(aux)
n * p * (1-p)
n <- 500
## Setup =================================
# Clean Start ---------------------------------
# rm(list = ls())
# Set Path
# setwd("/Users/sebastianbehrens/Documents/GitHub/SolowVariants")
# getwd()
# Loading Libraries ---------------------------------
# temporarily abandoned package managing function
# detach_package <- function(pkg, character.only = FALSE)
# {
#   if(!character.only)
#   {
#     pkg <- deparse(substitute(pkg))
#   }
#   search_item <- paste("package", pkg, sep = ":")
#   while(search_item %in% search())
#   {
#     detach(search_item, unload = TRUE, character.only = TRUE)
#   }
# }
# detach_package("broom", TRUE)
# broom::augment()
# package_organiser("broom")
# package_organiser <- function(string){
#   if(!require(string, character.only = TRUE)){
#   install.packages(string)
#   library(string, character.only = TRUE)
# }else{
#   library(string, character.only = TRUE)
# }
# }
# #
library(tidyverse)
library(shiny)
library(hexbin)
library(plotly)
library(shinythemes)
library(DT)
library(tidyverse)
# library(modelr)
library(ggplot2)
# library(stargazer)
library(R.utils)
# library(reactlog)
# reactlog_enable()
# ggplot2 Setup ---------------------------------
theme_set(
theme_classic() +
theme(
axis.ticks.length = unit(-0.25, "cm"),
axis.text.x = element_text(margin = unit(c(0.4, 0, 0, 0), "cm")),
axis.text.y = element_text(margin = unit(c(0, 0.4, 0, 0), "cm")),
axis.line = element_blank(),
panel.grid.major.y = element_line(linetype = 2),
plot.title = element_text(hjust = 0.5),
text = element_text(family = "serif"),
# legend.justification = c("right", "top"),
legend.position = "top",
# legend.position = c(1, 1),
# legend.position = c(.98, .98),
legend.background = element_rect(fill = NA, color = "black"),
panel.border = element_rect(fill = NA, size = 1.25),
strip.text = element_text(size = 12)
# legend.margin = margin(6, 10, 6, 6)
# legend.box.background = element_rect(colour = "black")
)
)
# Sourcing Simulation Functions and Helper Functions ---------------------------------
source("HelperFunctions.R")
source("SimulationFunctions/BS.R")
source("SimulationFunctions/GS.R")
source("SimulationFunctions/ESSOE.R")
source("SimulationFunctions/ESHC.R")
source("SimulationFunctions/ESSRO.R")
source("SimulationFunctions/ESSRL.R")
source("SimulationFunctions/ESSROL.R")
source("CompareModels.R")
# Essential Sourcing Function ---------------------------------
source("ShinyAppSourcer.R")
# getShinyPart <- function(kind, which, n_ModelComparison=0) {
#   # kind for "server" or "tab"
#   # which for the abbreviation of the respective part
#   # kind <- "S"
#   # which <- "BS"
#   # n_ModelComparison <- 1
#   if (kind %in% c("S", "T", "D")) {} else {
#     stop("The entered value for 'kind' in getShinyPart() is not defined.")
#   }
#   if(kind == "D" && n_ModelComparison == 0){stop("When using 'D' in getShinyPart() make sure to deliver an appropriate value to n_ModelComparison")}
#   source_part1 <- if(kind == "T"){"Tabs"}else if(kind == "S"){"ServerParts"}else if(kind == "D"){"DynamicInterfaces"}
#   source_part2 <- if(kind == "T"){"Tab.R"}else if(kind == "S"){"Server.R"}else if(kind == "D"){"DynamicInterface.R"}
#   path_to_source <- paste0(
#     source_part1,
#     "/",
#     ifelse(kind == "D", paste0("Group", n_ModelComparison, "/"), ""),
#     which,
#     source_part2
#   )
#
#   if(kind == "T"){
#     source(path_to_source)
#     return(get(paste0(which, "Tab")))
#   }else if(kind == "S"){
#     # source(path_to_source, local = TRUE)
#   }else if(kind == "D"){
#     source(path_to_source)
#     return(get(paste0(which, "DynamicInterface")))
#   }
# }
# Shiny App =================================
shinyApp(
ui = fluidPage(
# tags$head(
#   tags$style(
#     "#inTabset {
#     position: fixed;
#     width: 100%;
#     background-color: white;
#     top: 0;
#     }",
#     ".tab-content  {
#     margin-top: 80px;
#   }"
#   )
# ),
theme = shinytheme("cerulean"),
titlePanel("Solow Growth Models in Macroeconomic Theory"),
# Loading Tabs ---------------------------------
tabsetPanel(type = "pills",
# id = "inTabset",
getShinyPart("T", "StartPage"),
getShinyPart("T", "BS"),
getShinyPart("T", "GS"),
getShinyPart("T", "ESSOE"),
getShinyPart("T", "ESHC"),
getShinyPart("T", "ESSRO"),
getShinyPart("T", "ESSRL"),
getShinyPart("T", "ESSROL"),
getShinyPart("T", "Comparison")
)
),
server = function(input, output, session) {
# getShinyPart("S", "BS")
source("ServerParts/BSServer.R", local = TRUE)
source("ServerParts/GSServer.R", local = TRUE)
source("ServerParts/ESSOEServer.R", local = TRUE)
source("ServerParts/ESHCServer.R", local = TRUE)
source("ServerParts/ESSROServer.R", local = TRUE)
source("ServerParts/ESSRLServer.R", local = TRUE)
source("ServerParts/ESSROLServer.R", local = TRUE)
source("ServerParts/ComparisonServer.R", local = TRUE)
# to be taken out when app is published
session$onSessionEnded(stopApp)
}
)
# Meta-Information All Variables =================================
meta_ESEG_variables <-
c(
"Output",
"Consumption",
"Capital Stock",
"Labor Stock",
"Total Factor Productivity",
"Output per Worker",
"Consumption per Worker",
"Capital Stock per Worker",
"Output per Effective Worker",
"Consumption per Effective Worker",
"Capital Stock per Effective Worker",
"Wage Rate",
"Rental Rate",
"Log of Capital Stock",
"Log of Capital Stock per Worker",
"Log of Capital Stock per Effective Worker",
"Log of Output",
"Log of Output per Worker",
"Log of Output per Effective Worker",
"Growth Rate of Output",
"Growth Rate of Output per Worker",
"Growth Rate of Output per Effective Worker",
"Growth Rate of Capital Stock",
"Growth Rate of Capital Stock per Worker",
"Growth Rate of Capital Stock per Effective Worker"
)
# 1.1 Simulate the Basic Solow Model =================================
SimulateExtendedSolowModelEndogenousGrowth <- function(paragrid, np, startvals){
# Inputs ---------------------------------
# paragrid for parameter grid;
# np for number of periods;
# vts for vars to simulat
# Load Basic Model Functions ---------------------------------
source("ModelFunctions/ESEGModelFunctions.R")
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_ESEG_variables), np)
# Fill Start Values for Period 0 ---------------------------------
aux_index <- which(sim_table$period == 0)
sim_table[[aux_index, "L"]] <- startvals$L
sim_table[[aux_index, "K"]] <- startvals$K
sim_table[[aux_index, "Y"]] <- ESEG_MF_Y(sim_table[["K"]][[which(sim_table$period == 0)]],
sim_table[["L"]][[which(sim_table$period == 0)]],
paragrid[["alpha"]][[which(paragrid$period == 0)]],
paragrid[["phi"]][[which(paragrid$period == 0)]])
# Computing Variables after Period 0 ---------------------------------
for (i in 1:np){
# i <- 1
# print(i)
aux_index <- which(sim_table$period == i)
sim_table[[aux_index, "L"]] <- ESEG_MF_LN(paragrid[["n"]][[which(paragrid$period == i-1)]],
sim_table[["L"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "K"]] <- ESEG_MF_KN(paragrid[["s"]][[which(paragrid$period == i-1)]],
sim_table[["Y"]][[which(sim_table$period == i-1)]],
paragrid[["delta"]][[which(paragrid$period == i-1)]],
sim_table[["K"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "Y"]] <- ESEG_MF_Y(sim_table[["K"]][[which(sim_table$period == 0)]],
sim_table[["L"]][[which(sim_table$period == 0)]],
paragrid[["alpha"]][[which(paragrid$period == 0)]],
paragrid[["phi"]][[which(paragrid$period == 0)]])
}
# Computing Additional Variables ---------------------------------
remaining_vars_to_compute_bool <- names(sim_table) %in% c("period", "L", "K", "Y")
sim_table <- add_var_computer(sim_table, remaining_vars_to_compute_bool, paragrid, "special", "ESEG")
return(sim_table)
}
# # Testing
testnamel <- c("alpha", "phi", "delta", "n", "s")
testivl <- c(1/3, 0.5, 0.15, 0.01, 0.2)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 200
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1)
testsimulation <- SimulateExtendedSolowModelEndogenousGrowth(testgridalt, np,startvals)
source("HelperFunctions.R")
n <- 0.01
phi <- 0.5
delta <- 0.15
(1 + n)^(1/(1- phi)) > 1- delta
simulation_correctness_checker(testsimulation[nrow(testsimulation), ],
paragrid[nrow(paragrid), ],
"ESEG")
# # Testing
testnamel <- c("alpha", "phi", "delta", "n", "s")
testivl <- c(1/3, 0.5, 0.15, 0.01, 0.2)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 200
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1)
testsimulation <- SimulateExtendedSolowModelEndogenousGrowth(testgridalt, np,startvals)
testsimulation
ESEG_MF_Y(1, 2, 0.33, 0.5)
ESEG_MF_Y(1, 1.05, 0.33, 0.5)
ESEG_MF_Y(1, 1.01, 0.33, 0.5)
ESEG_MF_Y(1.26, 1.09, 0.33, 0.5)
# 1.1 Simulate the Basic Solow Model =================================
SimulateExtendedSolowModelEndogenousGrowth <- function(paragrid, np, startvals){
# Inputs ---------------------------------
# paragrid for parameter grid;
# np for number of periods;
# vts for vars to simulat
# Load Basic Model Functions ---------------------------------
source("ModelFunctions/ESEGModelFunctions.R")
# Initialize Simulation Table ---------------------------------
sim_table <- create_simulation_table(variable_encoder(meta_ESEG_variables), np)
# Fill Start Values for Period 0 ---------------------------------
aux_index <- which(sim_table$period == 0)
sim_table[[aux_index, "L"]] <- startvals$L
sim_table[[aux_index, "K"]] <- startvals$K
sim_table[[aux_index, "Y"]] <- ESEG_MF_Y(sim_table[["K"]][[which(sim_table$period == 0)]],
sim_table[["L"]][[which(sim_table$period == 0)]],
paragrid[["alpha"]][[which(paragrid$period == 0)]],
paragrid[["phi"]][[which(paragrid$period == 0)]])
# Computing Variables after Period 0 ---------------------------------
for (i in 1:np){
# i <- 1
# print(i)
aux_index <- which(sim_table$period == i)
sim_table[[aux_index, "L"]] <- ESEG_MF_LN(paragrid[["n"]][[which(paragrid$period == i-1)]],
sim_table[["L"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "K"]] <- ESEG_MF_KN(paragrid[["s"]][[which(paragrid$period == i-1)]],
sim_table[["Y"]][[which(sim_table$period == i-1)]],
paragrid[["delta"]][[which(paragrid$period == i-1)]],
sim_table[["K"]][[which(sim_table$period == i-1)]])
sim_table[[aux_index, "Y"]] <- ESEG_MF_Y(sim_table[["K"]][[aux_index]],
sim_table[["L"]][[aux_index]],
paragrid[["alpha"]][[aux_index]],
paragrid[["phi"]][[aux_index]])
}
# Computing Additional Variables ---------------------------------
remaining_vars_to_compute_bool <- names(sim_table) %in% c("period", "L", "K", "Y")
sim_table <- add_var_computer(sim_table, remaining_vars_to_compute_bool, paragrid, "special", "ESEG")
return(sim_table)
}
# # Testing
testnamel <- c("alpha", "phi", "delta", "n", "s")
testivl <- c(1/3, 0.5, 0.15, 0.01, 0.2)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 200
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1)
testsimulation <- SimulateExtendedSolowModelEndogenousGrowth(testgridalt, np,startvals)
source("HelperFunctions.R")
ESEG_MF_Y(1.26, 1.09, 0.33, 0.5)
n <- 0.01
phi <- 0.5
delta <- 0.15
(1 + n)^(1/(1- phi)) > 1- delta
simulation_correctness_checker(testsimulation[nrow(testsimulation), ],
paragrid[nrow(paragrid), ],
"ESEG")
3 %>% between(2,5)
3 %>% between(2,3)
(1 + n)^(1/(1- phi)) > 1- delta
sim_data[["TFP"]]
testsimulation[["TFP"]]
testsimulation <- SimulateExtendedSolowModelEndogenousGrowth(testgridalt, np,startvals)
(testsimulation[["TFP"]][[201]] - testsimulation[["TFP"]][[200]])/testsimulation[["TFP"]][[200]]
ESEG_SS_gY <- function(n, phi, s, A, delta){
if(i < 1){
(1 + n)^((phi)/(1- phi)) - 1
}else if(i %>% between(0.95, 1)){
s * A - delta
}else if(i > 1){
}
}
ESEG_SS_gY(n, phi, 0, 0, 0)
ESEG_SS_gY <- function(n, phi, s, A, delta){
if(phi < 1){
(1 + n)^((phi)/(1- phi)) - 1
}else if(i %>% between(0.95, 1)){
s * A - delta
}else if(phi > 1){
}
}
ESEG_SS_gY(n, phi, 0, 0, 0)
(testsimulation[["TFP"]][[201]] - testsimulation[["TFP"]][[200]])/testsimulation[["TFP"]][[200]]
ESEG_SS_gY(n, phi, 0, 0, 2)
ESEG_SS_gY(n, phi, 0, 2, 2)
ESEG_SS_gY(n, phi, 2, 2, 2)
# # Testing
testnamel <- c("alpha", "phi", "delta", "n", "s")
testivl <- c(1/3, 0.99, 0.15, 0.01, 0.2)
testpfcl <- c(NA,NA,NA, NA, NA)
testnvl <- c(NA, NA, NA, NA, NA)
np <- 200
testgridalt <- create_parameter_grid(testnamel, testivl, testpfcl, testnvl, np)
paragrid <- testgridalt
startvals <- list(K = 1, L = 1)
testsimulation <- SimulateExtendedSolowModelEndogenousGrowth(testgridalt, np,startvals)
n <- 0.01
phi <- 0.99
delta <- 0.15
(1 + n)^(1/(1- phi)) > 1- delta
(testsimulation[["TFP"]][[201]] - testsimulation[["TFP"]][[200]])/testsimulation[["TFP"]][[200]]
ESEG_SS_gY(n, phi, 2, 2, 2)
